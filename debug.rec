{
  "ListTools": {
    "input": [
      "path"
    ],
    "output": [
      "files"
    ],
    "links": {
      "files": [
        {
          "target": "ForEachJS",
          "input": "text"
        }
      ]
    }
  },
  "ForEachJS": {
    "input": [
      "text"
    ],
    "output": [
      "path"
    ],
    "links": {
      "path": [
        {
          "target": "DocPath",
          "input": "void"
        }
      ]
    },
    "children": [
      "FilterTool"
    ]
  },
  "DocPath": {
    "input": [
      "void"
    ],
    "output": [
      "value"
    ],
    "links": {
      "value": [
        {
          "target": "ListPages",
          "input": "path"
        }
      ]
    }
  },
  "ListPages": {
    "input": [
      "path"
    ],
    "output": [
      "files"
    ],
    "links": {
      "files": [
        {
          "target": "ForEachMD",
          "input": "any"
        }
      ]
    }
  },
  "ForEachMD": {
    "input": [
      "any"
    ],
    "output": [
      "path"
    ],
    "links": {
      "path": []
    },
    "children": [
      "Start"
    ]
  },
  "Start": {
    "input": [
      "any"
    ],
    "output": [
      "any"
    ],
    "links": {
      "any": [
        {
          "target": "LoadMdCode",
          "input": "path"
        },
        {
          "target": "BaseName",
          "input": "path"
        }
      ]
    }
  },
  "BaseName": {
    "input": [
      "path"
    ],
    "output": [
      "basename"
    ],
    "links": {
      "basename": [
        {
          "target": "ChangeExtension",
          "input": "path"
        }
      ]
    }
  },
  "ChangeExtension": {
    "input": [
      "path"
    ],
    "output": [
      "path"
    ],
    "links": {
      "path": [
        {
          "target": "HtmlFilename",
          "input": "text"
        }
      ]
    }
  },
  "HtmlFilename": {
    "input": [
      "text"
    ],
    "output": [
      "text"
    ],
    "links": {
      "text": [
        {
          "target": "SaveHTML",
          "input": "path"
        }
      ]
    }
  },
  "SaveHTML": {
    "input": [
      "path",
      "text"
    ],
    "output": [
      "path"
    ],
    "links": {
      "path": []
    }
  },
  "LoadMdCode": {
    "input": [
      "path"
    ],
    "output": [
      "text"
    ],
    "links": {
      "text": [
        {
          "target": "Markdown",
          "input": "md"
        }
      ]
    }
  },
  "Markdown": {
    "input": [
      "md"
    ],
    "output": [
      "html"
    ],
    "links": {
      "html": [
        {
          "target": "Combine",
          "input": "body"
        }
      ]
    }
  },
  "Combine": {
    "input": [
      "body"
    ],
    "output": [
      "text"
    ],
    "links": {
      "text": [
        {
          "target": "SaveHTML",
          "input": "text"
        }
      ]
    }
  },
  "FilterTool": {
    "input": [
      "text"
    ],
    "output": [
      "yes",
      "no"
    ],
    "links": {
      "yes": [
        {
          "target": "LoadToolCode",
          "input": "path"
        },
        {
          "target": "ToolName",
          "input": "path"
        },
        {
          "target": "SpecPath",
          "input": "path"
        }
      ],
      "no": []
    }
  },
  "SpecPath": {
    "input": [
      "path"
    ],
    "output": [
      "path"
    ],
    "links": {
      "path": [
        {
          "target": "SpecExists",
          "input": "path"
        }
      ]
    }
  },
  "SpecExists": {
    "input": [
      "path"
    ],
    "output": [
      "yes",
      "no"
    ],
    "links": {
      "yes": [
        {
          "target": "BlackHole",
          "input": "any"
        }
      ],
      "no": [
        {
          "target": "SaveSpec",
          "input": "path"
        },
        {
          "target": "ToolName2",
          "input": "path"
        },
        {
          "target": "SpecTemplate",
          "input": "path"
        }
      ]
    }
  },
  "BlackHole": {
    "input": [
      "any"
    ],
    "output": [],
    "links": {}
  },
  "SpecTemplate": {
    "input": [
      "name",
      "path"
    ],
    "output": [
      "text"
    ],
    "links": {
      "text": [
        {
          "target": "SaveSpec",
          "input": "text"
        }
      ]
    }
  },
  "SaveSpec": {
    "input": [
      "path",
      "text"
    ],
    "output": [
      "path"
    ],
    "links": {
      "path": [
        {
          "target": "BlackHole",
          "input": "any"
        }
      ]
    }
  },
  "ToolName2": {
    "input": [
      "path"
    ],
    "output": [
      "name"
    ],
    "links": {
      "name": [
        {
          "target": "SpecTemplate",
          "input": "name"
        }
      ]
    }
  },
  "ToolName": {
    "input": [
      "path"
    ],
    "output": [
      "name"
    ],
    "links": {
      "name": [
        {
          "target": "MakeTitle",
          "input": "text"
        },
        {
          "target": "MdFilename",
          "input": "text"
        }
      ]
    }
  },
  "MdFilename": {
    "input": [
      "text"
    ],
    "output": [
      "text"
    ],
    "links": {
      "text": [
        {
          "target": "SaveMd",
          "input": "path"
        }
      ]
    }
  },
  "SaveMd": {
    "input": [
      "path",
      "text"
    ],
    "output": [
      "path"
    ],
    "links": {
      "path": []
    }
  },
  "MakeTitle": {
    "input": [
      "text"
    ],
    "output": [
      "text"
    ],
    "links": {
      "text": [
        {
          "target": "Concat",
          "input": "title"
        }
      ]
    }
  },
  "Concat": {
    "input": [
      "title",
      "comment"
    ],
    "output": [
      "text"
    ],
    "links": {
      "text": [
        {
          "target": "SaveMd",
          "input": "text"
        }
      ]
    }
  },
  "LoadToolCode": {
    "input": [
      "path"
    ],
    "output": [
      "text"
    ],
    "links": {
      "text": [
        {
          "target": "ExtractComment",
          "input": "text"
        }
      ]
    }
  },
  "ExtractComment": {
    "input": [
      "text"
    ],
    "output": [
      "comment"
    ],
    "links": {
      "comment": [
        {
          "target": "Concat",
          "input": "comment"
        }
      ]
    }
  }
},{"action":"IN","tool":"ListTools","input":{"path":"e:\\Code\\github\\matis\\lib"}}
,{"action":"OUT","tool":"ListTools","output":{"files":["e:\\Code\\github\\matis\\lib\\graphviz.js","e:\\Code\\github\\matis\\lib\\process.js","e:\\Code\\github\\matis\\lib\\process.js~","e:\\Code\\github\\matis\\lib\\record.js","e:\\Code\\github\\matis\\lib\\runtime.js","e:\\Code\\github\\matis\\lib\\tool.base-name.js","e:\\Code\\github\\matis\\lib\\tool.base-name.js~","e:\\Code\\github\\matis\\lib\\tool.black-hole.js","e:\\Code\\github\\matis\\lib\\tool.black-hole.js~","e:\\Code\\github\\matis\\lib\\tool.change-extension.js","e:\\Code\\github\\matis\\lib\\tool.concat-strings.js","e:\\Code\\github\\matis\\lib\\tool.console-log.js","e:\\Code\\github\\matis\\lib\\tool.constant.js","e:\\Code\\github\\matis\\lib\\tool.dir-name.js","e:\\Code\\github\\matis\\lib\\tool.exists-file.js","e:\\Code\\github\\matis\\lib\\tool.for-each.js","e:\\Code\\github\\matis\\lib\\tool.join.js","e:\\Code\\github\\matis\\lib\\tool.join.js~","e:\\Code\\github\\matis\\lib\\tool.js","e:\\Code\\github\\matis\\lib\\tool.load-stream.js","e:\\Code\\github\\matis\\lib\\tool.load-text.js","e:\\Code\\github\\matis\\lib\\tool.match-regexp.js","e:\\Code\\github\\matis\\lib\\tool.nop.js","e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js","e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js~","e:\\Code\\github\\matis\\lib\\tool.read-dir.js","e:\\Code\\github\\matis\\lib\\tool.save-text.js","e:\\Code\\github\\matis\\lib\\tool.save-text.js~","e:\\Code\\github\\matis\\lib\\tool.shell-exec.js"]}}
,{"action":"POST","src":"ListTools","srcAtt":"files","dst":"ForEachJS","dstAtt":"text","value":["e:\\Code\\github\\matis\\lib\\graphviz.js","e:\\Code\\github\\matis\\lib\\process.js","e:\\Code\\github\\matis\\lib\\process.js~","e:\\Code\\github\\matis\\lib\\record.js","e:\\Code\\github\\matis\\lib\\runtime.js","e:\\Code\\github\\matis\\lib\\tool.base-name.js","e:\\Code\\github\\matis\\lib\\tool.base-name.js~","e:\\Code\\github\\matis\\lib\\tool.black-hole.js","e:\\Code\\github\\matis\\lib\\tool.black-hole.js~","e:\\Code\\github\\matis\\lib\\tool.change-extension.js","e:\\Code\\github\\matis\\lib\\tool.concat-strings.js","e:\\Code\\github\\matis\\lib\\tool.console-log.js","e:\\Code\\github\\matis\\lib\\tool.constant.js","e:\\Code\\github\\matis\\lib\\tool.dir-name.js","e:\\Code\\github\\matis\\lib\\tool.exists-file.js","e:\\Code\\github\\matis\\lib\\tool.for-each.js","e:\\Code\\github\\matis\\lib\\tool.join.js","e:\\Code\\github\\matis\\lib\\tool.join.js~","e:\\Code\\github\\matis\\lib\\tool.js","e:\\Code\\github\\matis\\lib\\tool.load-stream.js","e:\\Code\\github\\matis\\lib\\tool.load-text.js","e:\\Code\\github\\matis\\lib\\tool.match-regexp.js","e:\\Code\\github\\matis\\lib\\tool.nop.js","e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js","e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js~","e:\\Code\\github\\matis\\lib\\tool.read-dir.js","e:\\Code\\github\\matis\\lib\\tool.save-text.js","e:\\Code\\github\\matis\\lib\\tool.save-text.js~","e:\\Code\\github\\matis\\lib\\tool.shell-exec.js"]}
,{"action":"IN","tool":"ForEachJS","input":{"text":["e:\\Code\\github\\matis\\lib\\graphviz.js","e:\\Code\\github\\matis\\lib\\process.js","e:\\Code\\github\\matis\\lib\\process.js~","e:\\Code\\github\\matis\\lib\\record.js","e:\\Code\\github\\matis\\lib\\runtime.js","e:\\Code\\github\\matis\\lib\\tool.base-name.js","e:\\Code\\github\\matis\\lib\\tool.base-name.js~","e:\\Code\\github\\matis\\lib\\tool.black-hole.js","e:\\Code\\github\\matis\\lib\\tool.black-hole.js~","e:\\Code\\github\\matis\\lib\\tool.change-extension.js","e:\\Code\\github\\matis\\lib\\tool.concat-strings.js","e:\\Code\\github\\matis\\lib\\tool.console-log.js","e:\\Code\\github\\matis\\lib\\tool.constant.js","e:\\Code\\github\\matis\\lib\\tool.dir-name.js","e:\\Code\\github\\matis\\lib\\tool.exists-file.js","e:\\Code\\github\\matis\\lib\\tool.for-each.js","e:\\Code\\github\\matis\\lib\\tool.join.js","e:\\Code\\github\\matis\\lib\\tool.join.js~","e:\\Code\\github\\matis\\lib\\tool.js","e:\\Code\\github\\matis\\lib\\tool.load-stream.js","e:\\Code\\github\\matis\\lib\\tool.load-text.js","e:\\Code\\github\\matis\\lib\\tool.match-regexp.js","e:\\Code\\github\\matis\\lib\\tool.nop.js","e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js","e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js~","e:\\Code\\github\\matis\\lib\\tool.read-dir.js","e:\\Code\\github\\matis\\lib\\tool.save-text.js","e:\\Code\\github\\matis\\lib\\tool.save-text.js~","e:\\Code\\github\\matis\\lib\\tool.shell-exec.js"]}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":0,"text":"e:\\Code\\github\\matis\\lib\\graphviz.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\graphviz.js","$tag":0}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":1,"text":"e:\\Code\\github\\matis\\lib\\process.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\process.js","$tag":1}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":2,"text":"e:\\Code\\github\\matis\\lib\\process.js~"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\process.js~","$tag":2}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":3,"text":"e:\\Code\\github\\matis\\lib\\record.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\record.js","$tag":3}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":4,"text":"e:\\Code\\github\\matis\\lib\\runtime.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\runtime.js","$tag":4}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":5,"text":"e:\\Code\\github\\matis\\lib\\tool.base-name.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.base-name.js","$tag":5}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.base-name.js","output":5}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":5,"path":"e:\\Code\\github\\matis\\lib\\tool.base-name.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.base-name.js","output":5}
,{"action":"IN","tool":"ToolName","input":{"$tag":5,"path":"e:\\Code\\github\\matis\\lib\\tool.base-name.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.BaseName","$tag":5}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.BaseName","output":5}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":5,"text":"tools.BaseName"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.BaseName\n\n","$tag":5}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.BaseName\n\n","output":5}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.BaseName","output":5}
,{"action":"IN","tool":"MdFilename","input":{"$tag":5,"text":"tools.BaseName"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.BaseName.md","$tag":5}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.BaseName.md","output":5}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.base-name.js","output":5}
,{"action":"IN","tool":"SpecPath","input":{"$tag":5,"path":"e:\\Code\\github\\matis\\lib\\tool.base-name.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.base-name.spec.js","$tag":5}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.base-name.spec.js","output":5}
,{"action":"IN","tool":"SpecExists","input":{"$tag":5,"path":"e:\\Code\\github\\matis\\spec\\tool.base-name.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":6,"text":"e:\\Code\\github\\matis\\lib\\tool.base-name.js~"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\tool.base-name.js~","$tag":6}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":7,"text":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js","$tag":7}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js","output":7}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":7,"path":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js","output":7}
,{"action":"IN","tool":"ToolName","input":{"$tag":7,"path":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.BlackHole","$tag":7}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.BlackHole","output":7}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":7,"text":"tools.BlackHole"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.BlackHole\n\n","$tag":7}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.BlackHole\n\n","output":7}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.BlackHole","output":7}
,{"action":"IN","tool":"MdFilename","input":{"$tag":7,"text":"tools.BlackHole"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.BlackHole.md","$tag":7}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.BlackHole.md","output":7}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js","output":7}
,{"action":"IN","tool":"SpecPath","input":{"$tag":7,"path":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.black-hole.spec.js","$tag":7}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.black-hole.spec.js","output":7}
,{"action":"IN","tool":"SpecExists","input":{"$tag":7,"path":"e:\\Code\\github\\matis\\spec\\tool.black-hole.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":8,"text":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js~"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\tool.black-hole.js~","$tag":8}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":9,"text":"e:\\Code\\github\\matis\\lib\\tool.change-extension.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.change-extension.js","$tag":9}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.change-extension.js","output":9}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":9,"path":"e:\\Code\\github\\matis\\lib\\tool.change-extension.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.change-extension.js","output":9}
,{"action":"IN","tool":"ToolName","input":{"$tag":9,"path":"e:\\Code\\github\\matis\\lib\\tool.change-extension.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.ChangeExtension","$tag":9}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.ChangeExtension","output":9}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":9,"text":"tools.ChangeExtension"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.ChangeExtension\n\n","$tag":9}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.ChangeExtension\n\n","output":9}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.ChangeExtension","output":9}
,{"action":"IN","tool":"MdFilename","input":{"$tag":9,"text":"tools.ChangeExtension"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.ChangeExtension.md","$tag":9}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.ChangeExtension.md","output":9}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.change-extension.js","output":9}
,{"action":"IN","tool":"SpecPath","input":{"$tag":9,"path":"e:\\Code\\github\\matis\\lib\\tool.change-extension.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.change-extension.spec.js","$tag":9}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.change-extension.spec.js","output":9}
,{"action":"IN","tool":"SpecExists","input":{"$tag":9,"path":"e:\\Code\\github\\matis\\spec\\tool.change-extension.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":10,"text":"e:\\Code\\github\\matis\\lib\\tool.concat-strings.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.concat-strings.js","$tag":10}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.concat-strings.js","output":10}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":10,"path":"e:\\Code\\github\\matis\\lib\\tool.concat-strings.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.concat-strings.js","output":10}
,{"action":"IN","tool":"ToolName","input":{"$tag":10,"path":"e:\\Code\\github\\matis\\lib\\tool.concat-strings.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.ConcatStrings","$tag":10}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.ConcatStrings","output":10}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":10,"text":"tools.ConcatStrings"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.ConcatStrings\n\n","$tag":10}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.ConcatStrings\n\n","output":10}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.ConcatStrings","output":10}
,{"action":"IN","tool":"MdFilename","input":{"$tag":10,"text":"tools.ConcatStrings"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.ConcatStrings.md","$tag":10}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.ConcatStrings.md","output":10}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.concat-strings.js","output":10}
,{"action":"IN","tool":"SpecPath","input":{"$tag":10,"path":"e:\\Code\\github\\matis\\lib\\tool.concat-strings.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.concat-strings.spec.js","$tag":10}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.concat-strings.spec.js","output":10}
,{"action":"IN","tool":"SpecExists","input":{"$tag":10,"path":"e:\\Code\\github\\matis\\spec\\tool.concat-strings.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":11,"text":"e:\\Code\\github\\matis\\lib\\tool.console-log.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.console-log.js","$tag":11}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.console-log.js","output":11}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":11,"path":"e:\\Code\\github\\matis\\lib\\tool.console-log.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.console-log.js","output":11}
,{"action":"IN","tool":"ToolName","input":{"$tag":11,"path":"e:\\Code\\github\\matis\\lib\\tool.console-log.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.ConsoleLog","$tag":11}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.ConsoleLog","output":11}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":11,"text":"tools.ConsoleLog"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.ConsoleLog\n\n","$tag":11}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.ConsoleLog\n\n","output":11}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.ConsoleLog","output":11}
,{"action":"IN","tool":"MdFilename","input":{"$tag":11,"text":"tools.ConsoleLog"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.ConsoleLog.md","$tag":11}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.ConsoleLog.md","output":11}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.console-log.js","output":11}
,{"action":"IN","tool":"SpecPath","input":{"$tag":11,"path":"e:\\Code\\github\\matis\\lib\\tool.console-log.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.console-log.spec.js","$tag":11}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.console-log.spec.js","output":11}
,{"action":"IN","tool":"SpecExists","input":{"$tag":11,"path":"e:\\Code\\github\\matis\\spec\\tool.console-log.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":12,"text":"e:\\Code\\github\\matis\\lib\\tool.constant.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.constant.js","$tag":12}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.constant.js","output":12}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":12,"path":"e:\\Code\\github\\matis\\lib\\tool.constant.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.constant.js","output":12}
,{"action":"IN","tool":"ToolName","input":{"$tag":12,"path":"e:\\Code\\github\\matis\\lib\\tool.constant.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.Constant","$tag":12}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.Constant","output":12}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":12,"text":"tools.Constant"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.Constant\n\n","$tag":12}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.Constant\n\n","output":12}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.Constant","output":12}
,{"action":"IN","tool":"MdFilename","input":{"$tag":12,"text":"tools.Constant"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.Constant.md","$tag":12}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.Constant.md","output":12}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.constant.js","output":12}
,{"action":"IN","tool":"SpecPath","input":{"$tag":12,"path":"e:\\Code\\github\\matis\\lib\\tool.constant.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.constant.spec.js","$tag":12}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.constant.spec.js","output":12}
,{"action":"IN","tool":"SpecExists","input":{"$tag":12,"path":"e:\\Code\\github\\matis\\spec\\tool.constant.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":13,"text":"e:\\Code\\github\\matis\\lib\\tool.dir-name.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.dir-name.js","$tag":13}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.dir-name.js","output":13}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":13,"path":"e:\\Code\\github\\matis\\lib\\tool.dir-name.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.dir-name.js","output":13}
,{"action":"IN","tool":"ToolName","input":{"$tag":13,"path":"e:\\Code\\github\\matis\\lib\\tool.dir-name.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.DirName","$tag":13}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.DirName","output":13}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":13,"text":"tools.DirName"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.DirName\n\n","$tag":13}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.DirName\n\n","output":13}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.DirName","output":13}
,{"action":"IN","tool":"MdFilename","input":{"$tag":13,"text":"tools.DirName"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.DirName.md","$tag":13}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.DirName.md","output":13}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.dir-name.js","output":13}
,{"action":"IN","tool":"SpecPath","input":{"$tag":13,"path":"e:\\Code\\github\\matis\\lib\\tool.dir-name.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.dir-name.spec.js","$tag":13}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.dir-name.spec.js","output":13}
,{"action":"IN","tool":"SpecExists","input":{"$tag":13,"path":"e:\\Code\\github\\matis\\spec\\tool.dir-name.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":14,"text":"e:\\Code\\github\\matis\\lib\\tool.exists-file.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.exists-file.js","$tag":14}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.exists-file.js","output":14}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":14,"path":"e:\\Code\\github\\matis\\lib\\tool.exists-file.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.exists-file.js","output":14}
,{"action":"IN","tool":"ToolName","input":{"$tag":14,"path":"e:\\Code\\github\\matis\\lib\\tool.exists-file.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.ExistsFile","$tag":14}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.ExistsFile","output":14}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":14,"text":"tools.ExistsFile"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.ExistsFile\n\n","$tag":14}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.ExistsFile\n\n","output":14}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.ExistsFile","output":14}
,{"action":"IN","tool":"MdFilename","input":{"$tag":14,"text":"tools.ExistsFile"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.ExistsFile.md","$tag":14}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.ExistsFile.md","output":14}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.exists-file.js","output":14}
,{"action":"IN","tool":"SpecPath","input":{"$tag":14,"path":"e:\\Code\\github\\matis\\lib\\tool.exists-file.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.exists-file.spec.js","$tag":14}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.exists-file.spec.js","output":14}
,{"action":"IN","tool":"SpecExists","input":{"$tag":14,"path":"e:\\Code\\github\\matis\\spec\\tool.exists-file.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":15,"text":"e:\\Code\\github\\matis\\lib\\tool.for-each.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.for-each.js","$tag":15}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.for-each.js","output":15}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":15,"path":"e:\\Code\\github\\matis\\lib\\tool.for-each.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.for-each.js","output":15}
,{"action":"IN","tool":"ToolName","input":{"$tag":15,"path":"e:\\Code\\github\\matis\\lib\\tool.for-each.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.ForEach","$tag":15}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.ForEach","output":15}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":15,"text":"tools.ForEach"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.ForEach\n\n","$tag":15}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.ForEach\n\n","output":15}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.ForEach","output":15}
,{"action":"IN","tool":"MdFilename","input":{"$tag":15,"text":"tools.ForEach"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.ForEach.md","$tag":15}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.ForEach.md","output":15}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.for-each.js","output":15}
,{"action":"IN","tool":"SpecPath","input":{"$tag":15,"path":"e:\\Code\\github\\matis\\lib\\tool.for-each.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.for-each.spec.js","$tag":15}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.for-each.spec.js","output":15}
,{"action":"IN","tool":"SpecExists","input":{"$tag":15,"path":"e:\\Code\\github\\matis\\spec\\tool.for-each.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":16,"text":"e:\\Code\\github\\matis\\lib\\tool.join.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.join.js","$tag":16}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.join.js","output":16}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":16,"path":"e:\\Code\\github\\matis\\lib\\tool.join.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.join.js","output":16}
,{"action":"IN","tool":"ToolName","input":{"$tag":16,"path":"e:\\Code\\github\\matis\\lib\\tool.join.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.Join","$tag":16}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.Join","output":16}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":16,"text":"tools.Join"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.Join\n\n","$tag":16}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.Join\n\n","output":16}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.Join","output":16}
,{"action":"IN","tool":"MdFilename","input":{"$tag":16,"text":"tools.Join"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.Join.md","$tag":16}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.Join.md","output":16}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.join.js","output":16}
,{"action":"IN","tool":"SpecPath","input":{"$tag":16,"path":"e:\\Code\\github\\matis\\lib\\tool.join.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.join.spec.js","$tag":16}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.join.spec.js","output":16}
,{"action":"IN","tool":"SpecExists","input":{"$tag":16,"path":"e:\\Code\\github\\matis\\spec\\tool.join.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":17,"text":"e:\\Code\\github\\matis\\lib\\tool.join.js~"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\tool.join.js~","$tag":17}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":18,"text":"e:\\Code\\github\\matis\\lib\\tool.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\tool.js","$tag":18}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":19,"text":"e:\\Code\\github\\matis\\lib\\tool.load-stream.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.load-stream.js","$tag":19}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.load-stream.js","output":19}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":19,"path":"e:\\Code\\github\\matis\\lib\\tool.load-stream.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.load-stream.js","output":19}
,{"action":"IN","tool":"ToolName","input":{"$tag":19,"path":"e:\\Code\\github\\matis\\lib\\tool.load-stream.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.LoadStream","$tag":19}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.LoadStream","output":19}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":19,"text":"tools.LoadStream"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.LoadStream\n\n","$tag":19}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.LoadStream\n\n","output":19}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.LoadStream","output":19}
,{"action":"IN","tool":"MdFilename","input":{"$tag":19,"text":"tools.LoadStream"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.LoadStream.md","$tag":19}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.LoadStream.md","output":19}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.load-stream.js","output":19}
,{"action":"IN","tool":"SpecPath","input":{"$tag":19,"path":"e:\\Code\\github\\matis\\lib\\tool.load-stream.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.load-stream.spec.js","$tag":19}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.load-stream.spec.js","output":19}
,{"action":"IN","tool":"SpecExists","input":{"$tag":19,"path":"e:\\Code\\github\\matis\\spec\\tool.load-stream.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":20,"text":"e:\\Code\\github\\matis\\lib\\tool.load-text.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.load-text.js","$tag":20}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.load-text.js","output":20}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":20,"path":"e:\\Code\\github\\matis\\lib\\tool.load-text.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.load-text.js","output":20}
,{"action":"IN","tool":"ToolName","input":{"$tag":20,"path":"e:\\Code\\github\\matis\\lib\\tool.load-text.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.LoadText","$tag":20}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.LoadText","output":20}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":20,"text":"tools.LoadText"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.LoadText\n\n","$tag":20}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.LoadText\n\n","output":20}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.LoadText","output":20}
,{"action":"IN","tool":"MdFilename","input":{"$tag":20,"text":"tools.LoadText"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.LoadText.md","$tag":20}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.LoadText.md","output":20}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.load-text.js","output":20}
,{"action":"IN","tool":"SpecPath","input":{"$tag":20,"path":"e:\\Code\\github\\matis\\lib\\tool.load-text.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.load-text.spec.js","$tag":20}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.load-text.spec.js","output":20}
,{"action":"IN","tool":"SpecExists","input":{"$tag":20,"path":"e:\\Code\\github\\matis\\spec\\tool.load-text.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":21,"text":"e:\\Code\\github\\matis\\lib\\tool.match-regexp.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.match-regexp.js","$tag":21}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.match-regexp.js","output":21}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":21,"path":"e:\\Code\\github\\matis\\lib\\tool.match-regexp.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.match-regexp.js","output":21}
,{"action":"IN","tool":"ToolName","input":{"$tag":21,"path":"e:\\Code\\github\\matis\\lib\\tool.match-regexp.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.MatchRegexp","$tag":21}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.MatchRegexp","output":21}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":21,"text":"tools.MatchRegexp"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.MatchRegexp\n\n","$tag":21}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.MatchRegexp\n\n","output":21}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.MatchRegexp","output":21}
,{"action":"IN","tool":"MdFilename","input":{"$tag":21,"text":"tools.MatchRegexp"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.MatchRegexp.md","$tag":21}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.MatchRegexp.md","output":21}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.match-regexp.js","output":21}
,{"action":"IN","tool":"SpecPath","input":{"$tag":21,"path":"e:\\Code\\github\\matis\\lib\\tool.match-regexp.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.match-regexp.spec.js","$tag":21}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.match-regexp.spec.js","output":21}
,{"action":"IN","tool":"SpecExists","input":{"$tag":21,"path":"e:\\Code\\github\\matis\\spec\\tool.match-regexp.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":22,"text":"e:\\Code\\github\\matis\\lib\\tool.nop.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.nop.js","$tag":22}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.nop.js","output":22}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":22,"path":"e:\\Code\\github\\matis\\lib\\tool.nop.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.nop.js","output":22}
,{"action":"IN","tool":"ToolName","input":{"$tag":22,"path":"e:\\Code\\github\\matis\\lib\\tool.nop.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.Nop","$tag":22}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.Nop","output":22}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":22,"text":"tools.Nop"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.Nop\n\n","$tag":22}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.Nop\n\n","output":22}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.Nop","output":22}
,{"action":"IN","tool":"MdFilename","input":{"$tag":22,"text":"tools.Nop"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.Nop.md","$tag":22}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.Nop.md","output":22}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.nop.js","output":22}
,{"action":"IN","tool":"SpecPath","input":{"$tag":22,"path":"e:\\Code\\github\\matis\\lib\\tool.nop.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.nop.spec.js","$tag":22}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.nop.spec.js","output":22}
,{"action":"IN","tool":"SpecExists","input":{"$tag":22,"path":"e:\\Code\\github\\matis\\spec\\tool.nop.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":23,"text":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js","$tag":23}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js","output":23}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":23,"path":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js","output":23}
,{"action":"IN","tool":"ToolName","input":{"$tag":23,"path":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.PrefixSuffix","$tag":23}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.PrefixSuffix","output":23}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":23,"text":"tools.PrefixSuffix"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.PrefixSuffix\n\n","$tag":23}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.PrefixSuffix\n\n","output":23}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.PrefixSuffix","output":23}
,{"action":"IN","tool":"MdFilename","input":{"$tag":23,"text":"tools.PrefixSuffix"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.PrefixSuffix.md","$tag":23}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.PrefixSuffix.md","output":23}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js","output":23}
,{"action":"IN","tool":"SpecPath","input":{"$tag":23,"path":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.prefix-suffix.spec.js","$tag":23}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.prefix-suffix.spec.js","output":23}
,{"action":"IN","tool":"SpecExists","input":{"$tag":23,"path":"e:\\Code\\github\\matis\\spec\\tool.prefix-suffix.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":24,"text":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js~"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\tool.prefix-suffix.js~","$tag":24}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":25,"text":"e:\\Code\\github\\matis\\lib\\tool.read-dir.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.read-dir.js","$tag":25}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.read-dir.js","output":25}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":25,"path":"e:\\Code\\github\\matis\\lib\\tool.read-dir.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.read-dir.js","output":25}
,{"action":"IN","tool":"ToolName","input":{"$tag":25,"path":"e:\\Code\\github\\matis\\lib\\tool.read-dir.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.ReadDir","$tag":25}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.ReadDir","output":25}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":25,"text":"tools.ReadDir"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.ReadDir\n\n","$tag":25}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.ReadDir\n\n","output":25}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.ReadDir","output":25}
,{"action":"IN","tool":"MdFilename","input":{"$tag":25,"text":"tools.ReadDir"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.ReadDir.md","$tag":25}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.ReadDir.md","output":25}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.read-dir.js","output":25}
,{"action":"IN","tool":"SpecPath","input":{"$tag":25,"path":"e:\\Code\\github\\matis\\lib\\tool.read-dir.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.read-dir.spec.js","$tag":25}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.read-dir.spec.js","output":25}
,{"action":"IN","tool":"SpecExists","input":{"$tag":25,"path":"e:\\Code\\github\\matis\\spec\\tool.read-dir.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":26,"text":"e:\\Code\\github\\matis\\lib\\tool.save-text.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.save-text.js","$tag":26}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.save-text.js","output":26}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":26,"path":"e:\\Code\\github\\matis\\lib\\tool.save-text.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.save-text.js","output":26}
,{"action":"IN","tool":"ToolName","input":{"$tag":26,"path":"e:\\Code\\github\\matis\\lib\\tool.save-text.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.SaveText","$tag":26}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.SaveText","output":26}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":26,"text":"tools.SaveText"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.SaveText\n\n","$tag":26}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.SaveText\n\n","output":26}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.SaveText","output":26}
,{"action":"IN","tool":"MdFilename","input":{"$tag":26,"text":"tools.SaveText"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.SaveText.md","$tag":26}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.SaveText.md","output":26}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.save-text.js","output":26}
,{"action":"IN","tool":"SpecPath","input":{"$tag":26,"path":"e:\\Code\\github\\matis\\lib\\tool.save-text.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.save-text.spec.js","$tag":26}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.save-text.spec.js","output":26}
,{"action":"IN","tool":"SpecExists","input":{"$tag":26,"path":"e:\\Code\\github\\matis\\spec\\tool.save-text.spec.js"}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":27,"text":"e:\\Code\\github\\matis\\lib\\tool.save-text.js~"}}
,{"action":"OUT","tool":"FilterTool","output":{"no":"e:\\Code\\github\\matis\\lib\\tool.save-text.js~","$tag":27}}
,{"action":"IN","tool":"FilterTool","input":{"$tag":28,"text":"e:\\Code\\github\\matis\\lib\\tool.shell-exec.js"}}
,{"action":"OUT","tool":"FilterTool","output":{"yes":"e:\\Code\\github\\matis\\lib\\tool.shell-exec.js","$tag":28}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"LoadToolCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.shell-exec.js","output":28}
,{"action":"IN","tool":"LoadToolCode","input":{"$tag":28,"path":"e:\\Code\\github\\matis\\lib\\tool.shell-exec.js"}}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"ToolName","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.shell-exec.js","output":28}
,{"action":"IN","tool":"ToolName","input":{"$tag":28,"path":"e:\\Code\\github\\matis\\lib\\tool.shell-exec.js"}}
,{"action":"OUT","tool":"ToolName","output":{"name":"tools.ShellExec","$tag":28}}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MakeTitle","dstAtt":"text","value":"tools.ShellExec","output":28}
,{"action":"IN","tool":"MakeTitle","input":{"$tag":28,"text":"tools.ShellExec"}}
,{"action":"OUT","tool":"MakeTitle","output":{"text":"# tools.ShellExec\n\n","$tag":28}}
,{"action":"POST","src":"MakeTitle","srcAtt":"text","dst":"Concat","dstAtt":"title","value":"# tools.ShellExec\n\n","output":28}
,{"action":"POST","src":"ToolName","srcAtt":"name","dst":"MdFilename","dstAtt":"text","value":"tools.ShellExec","output":28}
,{"action":"IN","tool":"MdFilename","input":{"$tag":28,"text":"tools.ShellExec"}}
,{"action":"OUT","tool":"MdFilename","output":{"text":"e:\\Code\\github\\matis\\doc/tools.ShellExec.md","$tag":28}}
,{"action":"POST","src":"MdFilename","srcAtt":"text","dst":"SaveMd","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc/tools.ShellExec.md","output":28}
,{"action":"POST","src":"FilterTool","srcAtt":"yes","dst":"SpecPath","dstAtt":"path","value":"e:\\Code\\github\\matis\\lib\\tool.shell-exec.js","output":28}
,{"action":"IN","tool":"SpecPath","input":{"$tag":28,"path":"e:\\Code\\github\\matis\\lib\\tool.shell-exec.js"}}
,{"action":"OUT","tool":"SpecPath","output":{"path":"e:\\Code\\github\\matis\\spec\\tool.shell-exec.spec.js","$tag":28}}
,{"action":"POST","src":"SpecPath","srcAtt":"path","dst":"SpecExists","dstAtt":"path","value":"e:\\Code\\github\\matis\\spec\\tool.shell-exec.spec.js","output":28}
,{"action":"IN","tool":"SpecExists","input":{"$tag":28,"path":"e:\\Code\\github\\matis\\spec\\tool.shell-exec.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.base-name.spec.js","$tag":5}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.base-name.spec.js","output":5}
,{"action":"IN","tool":"BlackHole","input":{"$tag":5,"any":"e:\\Code\\github\\matis\\spec\\tool.base-name.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.black-hole.spec.js","$tag":7}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.black-hole.spec.js","output":7}
,{"action":"IN","tool":"BlackHole","input":{"$tag":7,"any":"e:\\Code\\github\\matis\\spec\\tool.black-hole.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.change-extension.spec.js","$tag":9}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.change-extension.spec.js","output":9}
,{"action":"IN","tool":"BlackHole","input":{"$tag":9,"any":"e:\\Code\\github\\matis\\spec\\tool.change-extension.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.concat-strings.spec.js","$tag":10}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.concat-strings.spec.js","output":10}
,{"action":"IN","tool":"BlackHole","input":{"$tag":10,"any":"e:\\Code\\github\\matis\\spec\\tool.concat-strings.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.console-log.spec.js","$tag":11}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.console-log.spec.js","output":11}
,{"action":"IN","tool":"BlackHole","input":{"$tag":11,"any":"e:\\Code\\github\\matis\\spec\\tool.console-log.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.constant.spec.js","$tag":12}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.constant.spec.js","output":12}
,{"action":"IN","tool":"BlackHole","input":{"$tag":12,"any":"e:\\Code\\github\\matis\\spec\\tool.constant.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.dir-name.spec.js","$tag":13}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.dir-name.spec.js","output":13}
,{"action":"IN","tool":"BlackHole","input":{"$tag":13,"any":"e:\\Code\\github\\matis\\spec\\tool.dir-name.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.exists-file.spec.js","$tag":14}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.exists-file.spec.js","output":14}
,{"action":"IN","tool":"BlackHole","input":{"$tag":14,"any":"e:\\Code\\github\\matis\\spec\\tool.exists-file.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.for-each.spec.js","$tag":15}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.for-each.spec.js","output":15}
,{"action":"IN","tool":"BlackHole","input":{"$tag":15,"any":"e:\\Code\\github\\matis\\spec\\tool.for-each.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.join.spec.js","$tag":16}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.join.spec.js","output":16}
,{"action":"IN","tool":"BlackHole","input":{"$tag":16,"any":"e:\\Code\\github\\matis\\spec\\tool.join.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.load-stream.spec.js","$tag":19}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.load-stream.spec.js","output":19}
,{"action":"IN","tool":"BlackHole","input":{"$tag":19,"any":"e:\\Code\\github\\matis\\spec\\tool.load-stream.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.load-text.spec.js","$tag":20}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.load-text.spec.js","output":20}
,{"action":"IN","tool":"BlackHole","input":{"$tag":20,"any":"e:\\Code\\github\\matis\\spec\\tool.load-text.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.match-regexp.spec.js","$tag":21}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.match-regexp.spec.js","output":21}
,{"action":"IN","tool":"BlackHole","input":{"$tag":21,"any":"e:\\Code\\github\\matis\\spec\\tool.match-regexp.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.nop.spec.js","$tag":22}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.nop.spec.js","output":22}
,{"action":"IN","tool":"BlackHole","input":{"$tag":22,"any":"e:\\Code\\github\\matis\\spec\\tool.nop.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.prefix-suffix.spec.js","$tag":23}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.prefix-suffix.spec.js","output":23}
,{"action":"IN","tool":"BlackHole","input":{"$tag":23,"any":"e:\\Code\\github\\matis\\spec\\tool.prefix-suffix.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.read-dir.spec.js","$tag":25}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.read-dir.spec.js","output":25}
,{"action":"IN","tool":"BlackHole","input":{"$tag":25,"any":"e:\\Code\\github\\matis\\spec\\tool.read-dir.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.save-text.spec.js","$tag":26}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.save-text.spec.js","output":26}
,{"action":"IN","tool":"BlackHole","input":{"$tag":26,"any":"e:\\Code\\github\\matis\\spec\\tool.save-text.spec.js"}}
,{"action":"OUT","tool":"SpecExists","output":{"yes":"e:\\Code\\github\\matis\\spec\\tool.shell-exec.spec.js","$tag":28}}
,{"action":"POST","src":"SpecExists","srcAtt":"yes","dst":"BlackHole","dstAtt":"any","value":"e:\\Code\\github\\matis\\spec\\tool.shell-exec.spec.js","output":28}
,{"action":"IN","tool":"BlackHole","input":{"$tag":28,"any":"e:\\Code\\github\\matis\\spec\\tool.shell-exec.spec.js"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"BaseName\",\r\n        input: \"path\",\r\n        output: \"basename\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({basename: Path.basename(input.path)});\r\n        }\r\n    });\r\n};\r\n","$tag":5}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"BaseName\",\r\n        input: \"path\",\r\n        output: \"basename\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({basename: Path.basename(input.path)});\r\n        }\r\n    });\r\n};\r\n","output":5}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":5,"text":"var Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"BaseName\",\r\n        input: \"path\",\r\n        output: \"basename\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({basename: Path.basename(input.path)});\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n","$tag":5}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n","output":5}
,{"action":"IN","tool":"Concat","input":{"$tag":5,"title":"# tools.BaseName\n\n","comment":"\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.BaseName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n","$tag":5}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.BaseName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n","output":5}
,{"action":"IN","tool":"SaveMd","input":{"$tag":5,"path":"e:\\Code\\github\\matis\\doc/tools.BaseName.md","text":"# tools.BaseName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"BlackHole\",\r\n        input: \"any\",\r\n        exec: function(input, resolve) {}\r\n    });\r\n};\r\n","$tag":7}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"BlackHole\",\r\n        input: \"any\",\r\n        exec: function(input, resolve) {}\r\n    });\r\n};\r\n","output":7}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":7,"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"BlackHole\",\r\n        input: \"any\",\r\n        exec: function(input, resolve) {}\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n","$tag":7}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n","output":7}
,{"action":"IN","tool":"Concat","input":{"$tag":7,"title":"# tools.BlackHole\n\n","comment":"\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.BlackHole\n\n\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n","$tag":7}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.BlackHole\n\n\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n","output":7}
,{"action":"IN","tool":"SaveMd","input":{"$tag":7,"path":"e:\\Code\\github\\matis\\doc/tools.BlackHole.md","text":"# tools.BlackHole\n\n\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n*/\r\nmodule.exports = function(extensions) {\r\n    if (typeof extensions === 'undefined') {\r\n        throw Error(\"[tools.ChangeExtension] missing mandatory argument `extensions`!\");\r\n    }\r\n\r\n    return Tool({\r\n        name: \"ChangeExtension\",\r\n        input: \"path\",\r\n        output: \"path\",\r\n        exec: function(input, resolve, reject) {\r\n            var path = input.path;\r\n            if (typeof path !== 'string') {\r\n                return reject.call(this, \"[\" + this.name()\r\n                                   + \"] `path` must be a string and not \" + (typeof path));\r\n            }\r\n            var extPos = path.lastIndexOf('.');\r\n            if (extPos > -1) {\r\n                // If there is no extension, `path` remains unchanged.\r\n                var ext = path.substr(extPos + 1);\r\n                var replacement = extensions[ext];\r\n                if (typeof replacement === 'string') {\r\n                    path = path.substr(0, extPos + 1) + replacement;\r\n                }\r\n            }\r\n            resolve.call(this, {path: path});\r\n        }\r\n    });\r\n};\r\n","$tag":9}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n*/\r\nmodule.exports = function(extensions) {\r\n    if (typeof extensions === 'undefined') {\r\n        throw Error(\"[tools.ChangeExtension] missing mandatory argument `extensions`!\");\r\n    }\r\n\r\n    return Tool({\r\n        name: \"ChangeExtension\",\r\n        input: \"path\",\r\n        output: \"path\",\r\n        exec: function(input, resolve, reject) {\r\n            var path = input.path;\r\n            if (typeof path !== 'string') {\r\n                return reject.call(this, \"[\" + this.name()\r\n                                   + \"] `path` must be a string and not \" + (typeof path));\r\n            }\r\n            var extPos = path.lastIndexOf('.');\r\n            if (extPos > -1) {\r\n                // If there is no extension, `path` remains unchanged.\r\n                var ext = path.substr(extPos + 1);\r\n                var replacement = extensions[ext];\r\n                if (typeof replacement === 'string') {\r\n                    path = path.substr(0, extPos + 1) + replacement;\r\n                }\r\n            }\r\n            resolve.call(this, {path: path});\r\n        }\r\n    });\r\n};\r\n","output":9}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":9,"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n*/\r\nmodule.exports = function(extensions) {\r\n    if (typeof extensions === 'undefined') {\r\n        throw Error(\"[tools.ChangeExtension] missing mandatory argument `extensions`!\");\r\n    }\r\n\r\n    return Tool({\r\n        name: \"ChangeExtension\",\r\n        input: \"path\",\r\n        output: \"path\",\r\n        exec: function(input, resolve, reject) {\r\n            var path = input.path;\r\n            if (typeof path !== 'string') {\r\n                return reject.call(this, \"[\" + this.name()\r\n                                   + \"] `path` must be a string and not \" + (typeof path));\r\n            }\r\n            var extPos = path.lastIndexOf('.');\r\n            if (extPos > -1) {\r\n                // If there is no extension, `path` remains unchanged.\r\n                var ext = path.substr(extPos + 1);\r\n                var replacement = extensions[ext];\r\n                if (typeof replacement === 'string') {\r\n                    path = path.substr(0, extPos + 1) + replacement;\r\n                }\r\n            }\r\n            resolve.call(this, {path: path});\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n","$tag":9}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n","output":9}
,{"action":"IN","tool":"Concat","input":{"$tag":9,"title":"# tools.ChangeExtension\n\n","comment":"\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.ChangeExtension\n\n\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n","$tag":9}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.ChangeExtension\n\n\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n","output":9}
,{"action":"IN","tool":"SaveMd","input":{"$tag":9,"path":"e:\\Code\\github\\matis\\doc/tools.ChangeExtension.md","text":"# tools.ChangeExtension\n\n\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n*/\r\nmodule.exports = function(inputs) {\r\n    if (typeof inputs === 'string') inputs = [inputs];\r\n    if (!Array.isArray(inputs)) inputs = [];\r\n\r\n    return Tool({\r\n        name: \"ConcatStrings\",\r\n        input: inputs.slice(),\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            var result = '';\r\n            inputs.forEach(function (inputName) {\r\n                result += input[inputName];\r\n            });\r\n            resolve({text: result});\r\n        }\r\n    });\r\n};\r\n","$tag":10}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n*/\r\nmodule.exports = function(inputs) {\r\n    if (typeof inputs === 'string') inputs = [inputs];\r\n    if (!Array.isArray(inputs)) inputs = [];\r\n\r\n    return Tool({\r\n        name: \"ConcatStrings\",\r\n        input: inputs.slice(),\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            var result = '';\r\n            inputs.forEach(function (inputName) {\r\n                result += input[inputName];\r\n            });\r\n            resolve({text: result});\r\n        }\r\n    });\r\n};\r\n","output":10}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":10,"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n*/\r\nmodule.exports = function(inputs) {\r\n    if (typeof inputs === 'string') inputs = [inputs];\r\n    if (!Array.isArray(inputs)) inputs = [];\r\n\r\n    return Tool({\r\n        name: \"ConcatStrings\",\r\n        input: inputs.slice(),\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            var result = '';\r\n            inputs.forEach(function (inputName) {\r\n                result += input[inputName];\r\n            });\r\n            resolve({text: result});\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n","$tag":10}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n","output":10}
,{"action":"IN","tool":"Concat","input":{"$tag":10,"title":"# tools.ConcatStrings\n\n","comment":"\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.ConcatStrings\n\n\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n","$tag":10}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.ConcatStrings\n\n\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n","output":10}
,{"action":"IN","tool":"SaveMd","input":{"$tag":10,"path":"e:\\Code\\github\\matis\\doc/tools.ConcatStrings.md","text":"# tools.ConcatStrings\n\n\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n*/\r\nmodule.exports = function(prefix, logger) {\r\n    if (typeof prefix === 'undefined') prefix = 'log: ';\r\n    if (typeof prefix === 'function' || typeof prefix.log === 'function') {\r\n        logger = prefix;\r\n        prefix = 'log: ';\r\n    }\r\n    if (typeof logger === 'undefined') logger = console;\r\n    if (typeof logger === 'function') logger = {log: logger};\r\n    if (typeof logger.log !== 'function') logger = console;\r\n\r\n    return Tool({\r\n        name: \"ConsoleLog\",\r\n        input: \"any\",\r\n        output: \"any\",\r\n        exec: function(input, resolve, reject) {\r\n            logger.log(prefix + JSON.stringify(input.any, null, 3));\r\n            resolve(input);\r\n        }\r\n    });\r\n};\r\n","$tag":11}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n*/\r\nmodule.exports = function(prefix, logger) {\r\n    if (typeof prefix === 'undefined') prefix = 'log: ';\r\n    if (typeof prefix === 'function' || typeof prefix.log === 'function') {\r\n        logger = prefix;\r\n        prefix = 'log: ';\r\n    }\r\n    if (typeof logger === 'undefined') logger = console;\r\n    if (typeof logger === 'function') logger = {log: logger};\r\n    if (typeof logger.log !== 'function') logger = console;\r\n\r\n    return Tool({\r\n        name: \"ConsoleLog\",\r\n        input: \"any\",\r\n        output: \"any\",\r\n        exec: function(input, resolve, reject) {\r\n            logger.log(prefix + JSON.stringify(input.any, null, 3));\r\n            resolve(input);\r\n        }\r\n    });\r\n};\r\n","output":11}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":11,"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n*/\r\nmodule.exports = function(prefix, logger) {\r\n    if (typeof prefix === 'undefined') prefix = 'log: ';\r\n    if (typeof prefix === 'function' || typeof prefix.log === 'function') {\r\n        logger = prefix;\r\n        prefix = 'log: ';\r\n    }\r\n    if (typeof logger === 'undefined') logger = console;\r\n    if (typeof logger === 'function') logger = {log: logger};\r\n    if (typeof logger.log !== 'function') logger = console;\r\n\r\n    return Tool({\r\n        name: \"ConsoleLog\",\r\n        input: \"any\",\r\n        output: \"any\",\r\n        exec: function(input, resolve, reject) {\r\n            logger.log(prefix + JSON.stringify(input.any, null, 3));\r\n            resolve(input);\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n","$tag":11}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n","output":11}
,{"action":"IN","tool":"Concat","input":{"$tag":11,"title":"# tools.ConsoleLog\n\n","comment":"\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.ConsoleLog\n\n\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n","$tag":11}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.ConsoleLog\n\n\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n","output":11}
,{"action":"IN","tool":"SaveMd","input":{"$tag":11,"path":"e:\\Code\\github\\matis\\doc/tools.ConsoleLog.md","text":"# tools.ConsoleLog\n\n\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n*/\r\nmodule.exports = function(value) {\r\n    return Tool({\r\n        name: \"Constant\",\r\n        input: \"void\",\r\n        output: \"value\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({value: value});\r\n        }\r\n    });\r\n};\r\n","$tag":12}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n*/\r\nmodule.exports = function(value) {\r\n    return Tool({\r\n        name: \"Constant\",\r\n        input: \"void\",\r\n        output: \"value\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({value: value});\r\n        }\r\n    });\r\n};\r\n","output":12}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":12,"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n*/\r\nmodule.exports = function(value) {\r\n    return Tool({\r\n        name: \"Constant\",\r\n        input: \"void\",\r\n        output: \"value\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({value: value});\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n","$tag":12}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n","output":12}
,{"action":"IN","tool":"Concat","input":{"$tag":12,"title":"# tools.Constant\n\n","comment":"\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.Constant\n\n\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n","$tag":12}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.Constant\n\n\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n","output":12}
,{"action":"IN","tool":"SaveMd","input":{"$tag":12,"path":"e:\\Code\\github\\matis\\doc/tools.Constant.md","text":"# tools.Constant\n\n\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"BaseName\",\r\n        input: \"path\",\r\n        output: \"basename\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({basename: Path.basename(input.path)});\r\n        }\r\n    });\r\n};\r\n","$tag":13}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"BaseName\",\r\n        input: \"path\",\r\n        output: \"basename\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({basename: Path.basename(input.path)});\r\n        }\r\n    });\r\n};\r\n","output":13}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":13,"text":"var Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"BaseName\",\r\n        input: \"path\",\r\n        output: \"basename\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({basename: Path.basename(input.path)});\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n","$tag":13}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n","output":13}
,{"action":"IN","tool":"Concat","input":{"$tag":13,"title":"# tools.DirName\n\n","comment":"\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.DirName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n","$tag":13}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.DirName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n","output":13}
,{"action":"IN","tool":"SaveMd","input":{"$tag":13,"path":"e:\\Code\\github\\matis\\doc/tools.DirName.md","text":"# tools.DirName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n */\r\nmodule.exports = function(options) {\r\n    return Tool({\r\n        input: \"path\",\r\n        output: [\"yes\", \"no\"],\r\n        exec: function(input, resolve, reject) {\r\n            FS.stat(input.path, function(err, stats) {\r\n                if (err) resolve.call(this, {no: input.path});\r\n                else {\r\n                    if (stats.isFile()) {\r\n                        resolve.call(this, {yes: input.path});\r\n                    } else {\r\n                        resolve.call(this, {no: input.path});\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","$tag":14}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n */\r\nmodule.exports = function(options) {\r\n    return Tool({\r\n        input: \"path\",\r\n        output: [\"yes\", \"no\"],\r\n        exec: function(input, resolve, reject) {\r\n            FS.stat(input.path, function(err, stats) {\r\n                if (err) resolve.call(this, {no: input.path});\r\n                else {\r\n                    if (stats.isFile()) {\r\n                        resolve.call(this, {yes: input.path});\r\n                    } else {\r\n                        resolve.call(this, {no: input.path});\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","output":14}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":14,"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n */\r\nmodule.exports = function(options) {\r\n    return Tool({\r\n        input: \"path\",\r\n        output: [\"yes\", \"no\"],\r\n        exec: function(input, resolve, reject) {\r\n            FS.stat(input.path, function(err, stats) {\r\n                if (err) resolve.call(this, {no: input.path});\r\n                else {\r\n                    if (stats.isFile()) {\r\n                        resolve.call(this, {yes: input.path});\r\n                    } else {\r\n                        resolve.call(this, {no: input.path});\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n ","$tag":14}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n ","output":14}
,{"action":"IN","tool":"Concat","input":{"$tag":14,"title":"# tools.ExistsFile\n\n","comment":"\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n "}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.ExistsFile\n\n\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n ","$tag":14}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.ExistsFile\n\n\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n ","output":14}
,{"action":"IN","tool":"SaveMd","input":{"$tag":14,"path":"e:\\Code\\github\\matis\\doc/tools.ExistsFile.md","text":"# tools.ExistsFile\n\n\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n "}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    if (typeof options.tool === 'undefined') {\r\n        throw Error(\"[tools.ForEach] `options.tools` is mandatory!\");\r\n    }\r\n    if (!Tool.isTool(options.tool)) {\r\n        throw Error(\"[tools.ForEach] `options.tools` must be a Tool!\");\r\n    }\r\n    if (typeof options.input !== 'undefined') {\r\n        options.tool = options.tool.name();\r\n        throw Error(\"[tools.ForEach] `options.input` must not be set! \"\r\n                    + \"Inputs are the same as inputs of the inner tool.\\n\"\r\n                    + JSON.stringify(options, null, '  '));\r\n    }\r\n    // Input of foreach is the input of the inner tool.\r\n    options.input = options.tool.definition.input.slice();\r\n    if (typeof options.output === 'undefined') {\r\n        throw Error(\"[tools.ForEach] `options.output` is mandatory!\");\r\n    }\r\n\r\n    return Tool({\r\n        name: \"ForEach\",\r\n        children: options.tool,\r\n        input: options.input,\r\n        output: options.output,\r\n        exec: function(input, resolve, reject) {\r\n            var that = this;\r\n            var items = input[that.definition.input[0]];\r\n            if (!Array.isArray(items)) items = [items];\r\n            // The final output is an aggregation of the outputs of every iteration.\r\n            var aggregatedOutput = {};\r\n            // Init it with  arrays. At the end, each  array will have\r\n            // the  same  length,  corresponding   to  the  number  of\r\n            // iterations.\r\n            that.definition.output.forEach(function (outputName) {\r\n                aggregatedOutput[outputName] = [];\r\n            });\r\n\r\n            var count = items.length;\r\n            if (count == 0) {\r\n                // Nothing to loop.\r\n                return resolve(aggregatedOutput);\r\n            }\r\n\r\n            // To know  if the process is  over, we have to  know if all\r\n            // the inputs has been consumed.\r\n            // The  `flags` array  has as  many items  as the  number of\r\n            // iterations  in  the  for-each.  Each  time  an  input  is\r\n            // consumed,  we mark  a `1`  in  the `flags`  array and  we\r\n            // decrease  `count`. As  soon as  `count` is  null, we  can\r\n            // resolve the for-each.\r\n            var flags = [];\r\n            items.forEach(function () {\r\n                flags.push(0);\r\n            });\r\n            var progressCounter = function(output) {\r\n                var tags = output.$tag;\r\n                if (!Array.isArray(tags)) {\r\n                    tags = [tags];\r\n                }\r\n                tags.forEach(function (tag) {\r\n                    if (flags[tag] == 0) {\r\n                        count--;\r\n                    }\r\n                    flags[tag]++;\r\n                });\r\n            };\r\n\r\n            items.forEach(function (itm, tag) {\r\n                var pack = {$tag: tag};\r\n                that.definition.input.forEach(function (inputName, idx) {\r\n                    if (idx == 0) {\r\n                        pack[inputName] = itm;\r\n                    } else {\r\n                        // We loop on the first input only. The others\r\n                        // are used repeatedly for each iteration.\r\n                        pack[inputName] = input[inputName];\r\n                    }\r\n                });\r\n                // Execute one iteration.\r\n                options.tool.exec(\r\n                    pack,\r\n                    function(output) {\r\n                        // `tools.ForEach` defines  its own  outputs. If\r\n                        // its  child produces  other outputs,  they are\r\n                        // swallowed.\r\n                        var hasDataToExport = false;\r\n                        var outputName;\r\n                        for (var i = 0 ; i < that.definition.output.length ; i++) {\r\n                            outputName = that.definition.output[i];\r\n                            if (output[outputName] !== undefined) {\r\n                                hasDataToExport = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (hasDataToExport) {\r\n                            that.definition.output.forEach(function (outputName) {\r\n                                var v = output[outputName];\r\n                                if (typeof v === 'undefined') return;\r\n                                aggregatedOutput[outputName].push(v);\r\n                            });\r\n                        }\r\n                        progressCounter(output);\r\n                        if (count == 0) {\r\n                            resolve(aggregatedOutput);\r\n                        }\r\n                    },\r\n                    reject\r\n                );\r\n            });\r\n        }\r\n    });\r\n};\r\n","$tag":15}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    if (typeof options.tool === 'undefined') {\r\n        throw Error(\"[tools.ForEach] `options.tools` is mandatory!\");\r\n    }\r\n    if (!Tool.isTool(options.tool)) {\r\n        throw Error(\"[tools.ForEach] `options.tools` must be a Tool!\");\r\n    }\r\n    if (typeof options.input !== 'undefined') {\r\n        options.tool = options.tool.name();\r\n        throw Error(\"[tools.ForEach] `options.input` must not be set! \"\r\n                    + \"Inputs are the same as inputs of the inner tool.\\n\"\r\n                    + JSON.stringify(options, null, '  '));\r\n    }\r\n    // Input of foreach is the input of the inner tool.\r\n    options.input = options.tool.definition.input.slice();\r\n    if (typeof options.output === 'undefined') {\r\n        throw Error(\"[tools.ForEach] `options.output` is mandatory!\");\r\n    }\r\n\r\n    return Tool({\r\n        name: \"ForEach\",\r\n        children: options.tool,\r\n        input: options.input,\r\n        output: options.output,\r\n        exec: function(input, resolve, reject) {\r\n            var that = this;\r\n            var items = input[that.definition.input[0]];\r\n            if (!Array.isArray(items)) items = [items];\r\n            // The final output is an aggregation of the outputs of every iteration.\r\n            var aggregatedOutput = {};\r\n            // Init it with  arrays. At the end, each  array will have\r\n            // the  same  length,  corresponding   to  the  number  of\r\n            // iterations.\r\n            that.definition.output.forEach(function (outputName) {\r\n                aggregatedOutput[outputName] = [];\r\n            });\r\n\r\n            var count = items.length;\r\n            if (count == 0) {\r\n                // Nothing to loop.\r\n                return resolve(aggregatedOutput);\r\n            }\r\n\r\n            // To know  if the process is  over, we have to  know if all\r\n            // the inputs has been consumed.\r\n            // The  `flags` array  has as  many items  as the  number of\r\n            // iterations  in  the  for-each.  Each  time  an  input  is\r\n            // consumed,  we mark  a `1`  in  the `flags`  array and  we\r\n            // decrease  `count`. As  soon as  `count` is  null, we  can\r\n            // resolve the for-each.\r\n            var flags = [];\r\n            items.forEach(function () {\r\n                flags.push(0);\r\n            });\r\n            var progressCounter = function(output) {\r\n                var tags = output.$tag;\r\n                if (!Array.isArray(tags)) {\r\n                    tags = [tags];\r\n                }\r\n                tags.forEach(function (tag) {\r\n                    if (flags[tag] == 0) {\r\n                        count--;\r\n                    }\r\n                    flags[tag]++;\r\n                });\r\n            };\r\n\r\n            items.forEach(function (itm, tag) {\r\n                var pack = {$tag: tag};\r\n                that.definition.input.forEach(function (inputName, idx) {\r\n                    if (idx == 0) {\r\n                        pack[inputName] = itm;\r\n                    } else {\r\n                        // We loop on the first input only. The others\r\n                        // are used repeatedly for each iteration.\r\n                        pack[inputName] = input[inputName];\r\n                    }\r\n                });\r\n                // Execute one iteration.\r\n                options.tool.exec(\r\n                    pack,\r\n                    function(output) {\r\n                        // `tools.ForEach` defines  its own  outputs. If\r\n                        // its  child produces  other outputs,  they are\r\n                        // swallowed.\r\n                        var hasDataToExport = false;\r\n                        var outputName;\r\n                        for (var i = 0 ; i < that.definition.output.length ; i++) {\r\n                            outputName = that.definition.output[i];\r\n                            if (output[outputName] !== undefined) {\r\n                                hasDataToExport = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (hasDataToExport) {\r\n                            that.definition.output.forEach(function (outputName) {\r\n                                var v = output[outputName];\r\n                                if (typeof v === 'undefined') return;\r\n                                aggregatedOutput[outputName].push(v);\r\n                            });\r\n                        }\r\n                        progressCounter(output);\r\n                        if (count == 0) {\r\n                            resolve(aggregatedOutput);\r\n                        }\r\n                    },\r\n                    reject\r\n                );\r\n            });\r\n        }\r\n    });\r\n};\r\n","output":15}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":15,"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    if (typeof options.tool === 'undefined') {\r\n        throw Error(\"[tools.ForEach] `options.tools` is mandatory!\");\r\n    }\r\n    if (!Tool.isTool(options.tool)) {\r\n        throw Error(\"[tools.ForEach] `options.tools` must be a Tool!\");\r\n    }\r\n    if (typeof options.input !== 'undefined') {\r\n        options.tool = options.tool.name();\r\n        throw Error(\"[tools.ForEach] `options.input` must not be set! \"\r\n                    + \"Inputs are the same as inputs of the inner tool.\\n\"\r\n                    + JSON.stringify(options, null, '  '));\r\n    }\r\n    // Input of foreach is the input of the inner tool.\r\n    options.input = options.tool.definition.input.slice();\r\n    if (typeof options.output === 'undefined') {\r\n        throw Error(\"[tools.ForEach] `options.output` is mandatory!\");\r\n    }\r\n\r\n    return Tool({\r\n        name: \"ForEach\",\r\n        children: options.tool,\r\n        input: options.input,\r\n        output: options.output,\r\n        exec: function(input, resolve, reject) {\r\n            var that = this;\r\n            var items = input[that.definition.input[0]];\r\n            if (!Array.isArray(items)) items = [items];\r\n            // The final output is an aggregation of the outputs of every iteration.\r\n            var aggregatedOutput = {};\r\n            // Init it with  arrays. At the end, each  array will have\r\n            // the  same  length,  corresponding   to  the  number  of\r\n            // iterations.\r\n            that.definition.output.forEach(function (outputName) {\r\n                aggregatedOutput[outputName] = [];\r\n            });\r\n\r\n            var count = items.length;\r\n            if (count == 0) {\r\n                // Nothing to loop.\r\n                return resolve(aggregatedOutput);\r\n            }\r\n\r\n            // To know  if the process is  over, we have to  know if all\r\n            // the inputs has been consumed.\r\n            // The  `flags` array  has as  many items  as the  number of\r\n            // iterations  in  the  for-each.  Each  time  an  input  is\r\n            // consumed,  we mark  a `1`  in  the `flags`  array and  we\r\n            // decrease  `count`. As  soon as  `count` is  null, we  can\r\n            // resolve the for-each.\r\n            var flags = [];\r\n            items.forEach(function () {\r\n                flags.push(0);\r\n            });\r\n            var progressCounter = function(output) {\r\n                var tags = output.$tag;\r\n                if (!Array.isArray(tags)) {\r\n                    tags = [tags];\r\n                }\r\n                tags.forEach(function (tag) {\r\n                    if (flags[tag] == 0) {\r\n                        count--;\r\n                    }\r\n                    flags[tag]++;\r\n                });\r\n            };\r\n\r\n            items.forEach(function (itm, tag) {\r\n                var pack = {$tag: tag};\r\n                that.definition.input.forEach(function (inputName, idx) {\r\n                    if (idx == 0) {\r\n                        pack[inputName] = itm;\r\n                    } else {\r\n                        // We loop on the first input only. The others\r\n                        // are used repeatedly for each iteration.\r\n                        pack[inputName] = input[inputName];\r\n                    }\r\n                });\r\n                // Execute one iteration.\r\n                options.tool.exec(\r\n                    pack,\r\n                    function(output) {\r\n                        // `tools.ForEach` defines  its own  outputs. If\r\n                        // its  child produces  other outputs,  they are\r\n                        // swallowed.\r\n                        var hasDataToExport = false;\r\n                        var outputName;\r\n                        for (var i = 0 ; i < that.definition.output.length ; i++) {\r\n                            outputName = that.definition.output[i];\r\n                            if (output[outputName] !== undefined) {\r\n                                hasDataToExport = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (hasDataToExport) {\r\n                            that.definition.output.forEach(function (outputName) {\r\n                                var v = output[outputName];\r\n                                if (typeof v === 'undefined') return;\r\n                                aggregatedOutput[outputName].push(v);\r\n                            });\r\n                        }\r\n                        progressCounter(output);\r\n                        if (count == 0) {\r\n                            resolve(aggregatedOutput);\r\n                        }\r\n                    },\r\n                    reject\r\n                );\r\n            });\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n","$tag":15}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n","output":15}
,{"action":"IN","tool":"Concat","input":{"$tag":15,"title":"# tools.ForEach\n\n","comment":"\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.ForEach\n\n\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n","$tag":15}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.ForEach\n\n\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n","output":15}
,{"action":"IN","tool":"SaveMd","input":{"$tag":15,"path":"e:\\Code\\github\\matis\\doc/tools.ForEach.md","text":"# tools.ForEach\n\n\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n*/\r\nmodule.exports = function(glue) {\r\n    if (typeof glue === 'undefined') glue = '';\r\n\r\n    return Tool({\r\n        name: \"Join\",\r\n        input: \"array\",\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            if (typeof input.array.join === 'function') {\r\n                resolve({text: input.array.join(glue)});\r\n            } else {\r\n                resolve({text: input.array});\r\n            }\r\n        }\r\n    });\r\n};\r\n","$tag":16}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n*/\r\nmodule.exports = function(glue) {\r\n    if (typeof glue === 'undefined') glue = '';\r\n\r\n    return Tool({\r\n        name: \"Join\",\r\n        input: \"array\",\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            if (typeof input.array.join === 'function') {\r\n                resolve({text: input.array.join(glue)});\r\n            } else {\r\n                resolve({text: input.array});\r\n            }\r\n        }\r\n    });\r\n};\r\n","output":16}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":16,"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n*/\r\nmodule.exports = function(glue) {\r\n    if (typeof glue === 'undefined') glue = '';\r\n\r\n    return Tool({\r\n        name: \"Join\",\r\n        input: \"array\",\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            if (typeof input.array.join === 'function') {\r\n                resolve({text: input.array.join(glue)});\r\n            } else {\r\n                resolve({text: input.array});\r\n            }\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n","$tag":16}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n","output":16}
,{"action":"IN","tool":"Concat","input":{"$tag":16,"title":"# tools.Join\n\n","comment":"\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.Join\n\n\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n","$tag":16}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.Join\n\n\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n","output":16}
,{"action":"IN","tool":"SaveMd","input":{"$tag":16,"path":"e:\\Code\\github\\matis\\doc/tools.Join.md","text":"# tools.Join\n\n\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    return Tool({\r\n        name: \"LoadStream\",\r\n        input: \"path\",\r\n        output: \"stream\",\r\n        exec: function(input, resolve, reject) {\r\n            FS.readFile(input.path, options, function(err, data) {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve({ stream: data });\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","$tag":19}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    return Tool({\r\n        name: \"LoadStream\",\r\n        input: \"path\",\r\n        output: \"stream\",\r\n        exec: function(input, resolve, reject) {\r\n            FS.readFile(input.path, options, function(err, data) {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve({ stream: data });\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","output":19}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":19,"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    return Tool({\r\n        name: \"LoadStream\",\r\n        input: \"path\",\r\n        output: \"stream\",\r\n        exec: function(input, resolve, reject) {\r\n            FS.readFile(input.path, options, function(err, data) {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve({ stream: data });\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n","$tag":19}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n","output":19}
,{"action":"IN","tool":"Concat","input":{"$tag":19,"title":"# tools.LoadStream\n\n","comment":"\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.LoadStream\n\n\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n","$tag":19}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.LoadStream\n\n\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n","output":19}
,{"action":"IN","tool":"SaveMd","input":{"$tag":19,"path":"e:\\Code\\github\\matis\\doc/tools.LoadStream.md","text":"# tools.LoadStream\n\n\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    if (typeof options === 'undefined') options = 'utf8';\r\n\r\n    return Tool({\r\n        name: \"LoadText\",\r\n        input: \"path\",\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            var path = input.path;\r\n            if (typeof path !== 'string') {\r\n                return reject.call(this, \"[\" + this.name()\r\n                                   + \"] `path` must be a string and not \" + (typeof path));\r\n            }\r\n            FS.readFile(path, options, function(err, data) {\r\n                if (err) {\r\n                    reject.call(this, err);\r\n                } else {\r\n                    resolve.call(this, { text: data.toString() });\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","$tag":20}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    if (typeof options === 'undefined') options = 'utf8';\r\n\r\n    return Tool({\r\n        name: \"LoadText\",\r\n        input: \"path\",\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            var path = input.path;\r\n            if (typeof path !== 'string') {\r\n                return reject.call(this, \"[\" + this.name()\r\n                                   + \"] `path` must be a string and not \" + (typeof path));\r\n            }\r\n            FS.readFile(path, options, function(err, data) {\r\n                if (err) {\r\n                    reject.call(this, err);\r\n                } else {\r\n                    resolve.call(this, { text: data.toString() });\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","output":20}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":20,"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    if (typeof options === 'undefined') options = 'utf8';\r\n\r\n    return Tool({\r\n        name: \"LoadText\",\r\n        input: \"path\",\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            var path = input.path;\r\n            if (typeof path !== 'string') {\r\n                return reject.call(this, \"[\" + this.name()\r\n                                   + \"] `path` must be a string and not \" + (typeof path));\r\n            }\r\n            FS.readFile(path, options, function(err, data) {\r\n                if (err) {\r\n                    reject.call(this, err);\r\n                } else {\r\n                    resolve.call(this, { text: data.toString() });\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n","$tag":20}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n","output":20}
,{"action":"IN","tool":"Concat","input":{"$tag":20,"title":"# tools.LoadText\n\n","comment":"\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.LoadText\n\n\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n","$tag":20}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.LoadText\n\n\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n","output":20}
,{"action":"IN","tool":"SaveMd","input":{"$tag":20,"path":"e:\\Code\\github\\matis\\doc/tools.LoadText.md","text":"# tools.LoadText\n\n\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n*/\r\nmodule.exports = function(pattern, flags) {\r\n    var rx = new RegExp(pattern, flags);\r\n\r\n    return Tool({\r\n        name: \"MathRegexp\",\r\n        input: \"text\",\r\n        output: [\"yes\", \"no\"],\r\n        exec: function(input, resolve, reject) {\r\n            try {\r\n                if (rx.test(input.text)) {\r\n                    resolve({yes: input.text});\r\n                } else {\r\n                    resolve({no: input.text});\r\n                }\r\n            } catch (ex) {\r\n                reject(ex);\r\n            }\r\n        }\r\n    });\r\n};\r\n","$tag":21}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n*/\r\nmodule.exports = function(pattern, flags) {\r\n    var rx = new RegExp(pattern, flags);\r\n\r\n    return Tool({\r\n        name: \"MathRegexp\",\r\n        input: \"text\",\r\n        output: [\"yes\", \"no\"],\r\n        exec: function(input, resolve, reject) {\r\n            try {\r\n                if (rx.test(input.text)) {\r\n                    resolve({yes: input.text});\r\n                } else {\r\n                    resolve({no: input.text});\r\n                }\r\n            } catch (ex) {\r\n                reject(ex);\r\n            }\r\n        }\r\n    });\r\n};\r\n","output":21}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":21,"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n*/\r\nmodule.exports = function(pattern, flags) {\r\n    var rx = new RegExp(pattern, flags);\r\n\r\n    return Tool({\r\n        name: \"MathRegexp\",\r\n        input: \"text\",\r\n        output: [\"yes\", \"no\"],\r\n        exec: function(input, resolve, reject) {\r\n            try {\r\n                if (rx.test(input.text)) {\r\n                    resolve({yes: input.text});\r\n                } else {\r\n                    resolve({no: input.text});\r\n                }\r\n            } catch (ex) {\r\n                reject(ex);\r\n            }\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n","$tag":21}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n","output":21}
,{"action":"IN","tool":"Concat","input":{"$tag":21,"title":"# tools.MatchRegexp\n\n","comment":"\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.MatchRegexp\n\n\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n","$tag":21}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.MatchRegexp\n\n\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n","output":21}
,{"action":"IN","tool":"SaveMd","input":{"$tag":21,"path":"e:\\Code\\github\\matis\\doc/tools.MatchRegexp.md","text":"# tools.MatchRegexp\n\n\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"Nop\",\r\n        input: \"any\",\r\n        output: \"any\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({any: input.any});\r\n        }\r\n    });\r\n};\r\n","$tag":22}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"Nop\",\r\n        input: \"any\",\r\n        output: \"any\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({any: input.any});\r\n        }\r\n    });\r\n};\r\n","output":22}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":22,"text":"var Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n*/\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"Nop\",\r\n        input: \"any\",\r\n        output: \"any\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({any: input.any});\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n","$tag":22}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n","output":22}
,{"action":"IN","tool":"Concat","input":{"$tag":22,"title":"# tools.Nop\n\n","comment":"\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.Nop\n\n\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n","$tag":22}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.Nop\n\n\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n","output":22}
,{"action":"IN","tool":"SaveMd","input":{"$tag":22,"path":"e:\\Code\\github\\matis\\doc/tools.Nop.md","text":"# tools.Nop\n\n\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    if (typeof options === 'undefined') options = {};\r\n    if (typeof options.prefix === 'undefined') options.prefix = '';\r\n    if (typeof options.suffix === 'undefined') options.suffix = '';\r\n\r\n    return Tool({\r\n        name: \"PrefixSuffix\",\r\n        input: \"text\",\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({text: options.prefix + input.text + options.suffix});\r\n        }\r\n    });\r\n};\r\n","$tag":23}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    if (typeof options === 'undefined') options = {};\r\n    if (typeof options.prefix === 'undefined') options.prefix = '';\r\n    if (typeof options.suffix === 'undefined') options.suffix = '';\r\n\r\n    return Tool({\r\n        name: \"PrefixSuffix\",\r\n        input: \"text\",\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({text: options.prefix + input.text + options.suffix});\r\n        }\r\n    });\r\n};\r\n","output":23}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":23,"text":"var Tool = require(\"./tool\");\r\n\r\n/**\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    if (typeof options === 'undefined') options = {};\r\n    if (typeof options.prefix === 'undefined') options.prefix = '';\r\n    if (typeof options.suffix === 'undefined') options.suffix = '';\r\n\r\n    return Tool({\r\n        name: \"PrefixSuffix\",\r\n        input: \"text\",\r\n        output: \"text\",\r\n        exec: function(input, resolve, reject) {\r\n            resolve({text: options.prefix + input.text + options.suffix});\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n","$tag":23}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n","output":23}
,{"action":"IN","tool":"Concat","input":{"$tag":23,"title":"# tools.PrefixSuffix\n\n","comment":"\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.PrefixSuffix\n\n\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n","$tag":23}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.PrefixSuffix\n\n\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n","output":23}
,{"action":"IN","tool":"SaveMd","input":{"$tag":23,"path":"e:\\Code\\github\\matis\\doc/tools.PrefixSuffix.md","text":"# tools.PrefixSuffix\n\n\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n"}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var FS = require(\"fs\");\r\nvar Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n */\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"ReadDir\",\r\n        input: \"path\",\r\n        output: \"files\",\r\n        exec: function(input, resolve, reject) {\r\n            FS.readdir(input.path, function(err, files) {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve({files: files.map(function(itm) {\r\n                        return Path.normalize(Path.join(input.path, itm));\r\n                    })});\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","$tag":25}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var FS = require(\"fs\");\r\nvar Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n */\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"ReadDir\",\r\n        input: \"path\",\r\n        output: \"files\",\r\n        exec: function(input, resolve, reject) {\r\n            FS.readdir(input.path, function(err, files) {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve({files: files.map(function(itm) {\r\n                        return Path.normalize(Path.join(input.path, itm));\r\n                    })});\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","output":25}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":25,"text":"var FS = require(\"fs\");\r\nvar Path = require(\"path\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n */\r\nmodule.exports = function() {\r\n    return Tool({\r\n        name: \"ReadDir\",\r\n        input: \"path\",\r\n        output: \"files\",\r\n        exec: function(input, resolve, reject) {\r\n            FS.readdir(input.path, function(err, files) {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve({files: files.map(function(itm) {\r\n                        return Path.normalize(Path.join(input.path, itm));\r\n                    })});\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n ","$tag":25}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n ","output":25}
,{"action":"IN","tool":"Concat","input":{"$tag":25,"title":"# tools.ReadDir\n\n","comment":"\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n "}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.ReadDir\n\n\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n ","$tag":25}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.ReadDir\n\n\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n ","output":25}
,{"action":"IN","tool":"SaveMd","input":{"$tag":25,"path":"e:\\Code\\github\\matis\\doc/tools.ReadDir.md","text":"# tools.ReadDir\n\n\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n "}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n */\r\nmodule.exports = function(options) {\r\n    if (typeof options === 'undefined') options = {encoding: 'utf8'};\r\n\r\n    return Tool({\r\n        name: \"SaveText\",\r\n        input: options.path ? 'text' : [\"path\", \"text\"],\r\n        output: \"path\",\r\n        exec: function(input, resolve, reject) {\r\n            var that = this;\r\n            if (options.path) {\r\n                input.path = options.path;\r\n            }\r\n            if (typeof input.path !== 'string') {\r\n                return reject.call(\r\n                    that,\r\n                    \"[\" + that.name() + \"] `path` must be a string and not a \"\r\n                        + (typeof input.path) + \"!\"\r\n                );\r\n            }\r\n            var text = input.text;\r\n            if (text.toString === 'function') text = text.toString();\r\n            FS.writeFile(input.path, text, options, function(err) {\r\n                if (err) {\r\n                    reject.call(that, err);\r\n                } else {\r\n                    resolve.call(that, {path: input.path});\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","$tag":26}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n */\r\nmodule.exports = function(options) {\r\n    if (typeof options === 'undefined') options = {encoding: 'utf8'};\r\n\r\n    return Tool({\r\n        name: \"SaveText\",\r\n        input: options.path ? 'text' : [\"path\", \"text\"],\r\n        output: \"path\",\r\n        exec: function(input, resolve, reject) {\r\n            var that = this;\r\n            if (options.path) {\r\n                input.path = options.path;\r\n            }\r\n            if (typeof input.path !== 'string') {\r\n                return reject.call(\r\n                    that,\r\n                    \"[\" + that.name() + \"] `path` must be a string and not a \"\r\n                        + (typeof input.path) + \"!\"\r\n                );\r\n            }\r\n            var text = input.text;\r\n            if (text.toString === 'function') text = text.toString();\r\n            FS.writeFile(input.path, text, options, function(err) {\r\n                if (err) {\r\n                    reject.call(that, err);\r\n                } else {\r\n                    resolve.call(that, {path: input.path});\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n","output":26}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":26,"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\n\r\n/**\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n */\r\nmodule.exports = function(options) {\r\n    if (typeof options === 'undefined') options = {encoding: 'utf8'};\r\n\r\n    return Tool({\r\n        name: \"SaveText\",\r\n        input: options.path ? 'text' : [\"path\", \"text\"],\r\n        output: \"path\",\r\n        exec: function(input, resolve, reject) {\r\n            var that = this;\r\n            if (options.path) {\r\n                input.path = options.path;\r\n            }\r\n            if (typeof input.path !== 'string') {\r\n                return reject.call(\r\n                    that,\r\n                    \"[\" + that.name() + \"] `path` must be a string and not a \"\r\n                        + (typeof input.path) + \"!\"\r\n                );\r\n            }\r\n            var text = input.text;\r\n            if (text.toString === 'function') text = text.toString();\r\n            FS.writeFile(input.path, text, options, function(err) {\r\n                if (err) {\r\n                    reject.call(that, err);\r\n                } else {\r\n                    resolve.call(that, {path: input.path});\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n ","$tag":26}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n ","output":26}
,{"action":"IN","tool":"Concat","input":{"$tag":26,"title":"# tools.SaveText\n\n","comment":"\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n "}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.SaveText\n\n\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n ","$tag":26}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.SaveText\n\n\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n ","output":26}
,{"action":"IN","tool":"SaveMd","input":{"$tag":26,"path":"e:\\Code\\github\\matis\\doc/tools.SaveText.md","text":"# tools.SaveText\n\n\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n "}}
,{"action":"OUT","tool":"LoadToolCode","output":{"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\nvar Exec = require(\"child_process\").exec;\r\n\r\n/**\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    return Tool({\r\n        name: \"LoadStream\",\r\n        input: 'command',\r\n        output: [\"strout\", \"stderr\", \"command\"],\r\n        exec: function(input, resolve, reject) {\r\n            Exec(input.command, options, function(err, stdout, stderr) {\r\n                if (err) return reject.call(this, err);\r\n                resolve.call(this, {stdout: stdout, stderr: stderr});\r\n            });\r\n        }\r\n    });\r\n};\r\n","$tag":28}}
,{"action":"POST","src":"LoadToolCode","srcAtt":"text","dst":"ExtractComment","dstAtt":"text","value":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\nvar Exec = require(\"child_process\").exec;\r\n\r\n/**\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    return Tool({\r\n        name: \"LoadStream\",\r\n        input: 'command',\r\n        output: [\"strout\", \"stderr\", \"command\"],\r\n        exec: function(input, resolve, reject) {\r\n            Exec(input.command, options, function(err, stdout, stderr) {\r\n                if (err) return reject.call(this, err);\r\n                resolve.call(this, {stdout: stdout, stderr: stderr});\r\n            });\r\n        }\r\n    });\r\n};\r\n","output":28}
,{"action":"IN","tool":"ExtractComment","input":{"$tag":28,"text":"var FS = require(\"fs\");\r\nvar Tool = require(\"./tool\");\r\nvar Exec = require(\"child_process\").exec;\r\n\r\n/**\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n*/\r\nmodule.exports = function(options) {\r\n    return Tool({\r\n        name: \"LoadStream\",\r\n        input: 'command',\r\n        output: [\"strout\", \"stderr\", \"command\"],\r\n        exec: function(input, resolve, reject) {\r\n            Exec(input.command, options, function(err, stdout, stderr) {\r\n                if (err) return reject.call(this, err);\r\n                resolve.call(this, {stdout: stdout, stderr: stderr});\r\n            });\r\n        }\r\n    });\r\n};\r\n"}}
,{"action":"OUT","tool":"ExtractComment","output":{"comment":"\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n","$tag":28}}
,{"action":"POST","src":"ExtractComment","srcAtt":"comment","dst":"Concat","dstAtt":"comment","value":"\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n","output":28}
,{"action":"IN","tool":"Concat","input":{"$tag":28,"title":"# tools.ShellExec\n\n","comment":"\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n"}}
,{"action":"OUT","tool":"Concat","output":{"text":"# tools.ShellExec\n\n\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n","$tag":28}}
,{"action":"POST","src":"Concat","srcAtt":"text","dst":"SaveMd","dstAtt":"text","value":"# tools.ShellExec\n\n\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n","output":28}
,{"action":"IN","tool":"SaveMd","input":{"$tag":28,"path":"e:\\Code\\github\\matis\\doc/tools.ShellExec.md","text":"# tools.ShellExec\n\n\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n"}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.BaseName.md","$tag":5}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.BlackHole.md","$tag":7}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.ChangeExtension.md","$tag":9}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.ConcatStrings.md","$tag":10}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.ConsoleLog.md","$tag":11}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.Constant.md","$tag":12}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.DirName.md","$tag":13}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.ExistsFile.md","$tag":14}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.ForEach.md","$tag":15}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.Join.md","$tag":16}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.LoadStream.md","$tag":19}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.LoadText.md","$tag":20}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.MatchRegexp.md","$tag":21}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.Nop.md","$tag":22}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.PrefixSuffix.md","$tag":23}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.ReadDir.md","$tag":25}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.SaveText.md","$tag":26}}
,{"action":"OUT","tool":"SaveMd","output":{"path":"e:\\Code\\github\\matis\\doc/tools.ShellExec.md","$tag":28}}
,{"action":"OUT","tool":"ForEachJS","output":{"path":["e:\\Code\\github\\matis\\doc/tools.BaseName.md","e:\\Code\\github\\matis\\doc/tools.BlackHole.md","e:\\Code\\github\\matis\\doc/tools.ChangeExtension.md","e:\\Code\\github\\matis\\doc/tools.ConcatStrings.md","e:\\Code\\github\\matis\\doc/tools.ConsoleLog.md","e:\\Code\\github\\matis\\doc/tools.Constant.md","e:\\Code\\github\\matis\\doc/tools.DirName.md","e:\\Code\\github\\matis\\doc/tools.ExistsFile.md","e:\\Code\\github\\matis\\doc/tools.ForEach.md","e:\\Code\\github\\matis\\doc/tools.Join.md","e:\\Code\\github\\matis\\doc/tools.LoadStream.md","e:\\Code\\github\\matis\\doc/tools.LoadText.md","e:\\Code\\github\\matis\\doc/tools.MatchRegexp.md","e:\\Code\\github\\matis\\doc/tools.Nop.md","e:\\Code\\github\\matis\\doc/tools.PrefixSuffix.md","e:\\Code\\github\\matis\\doc/tools.ReadDir.md","e:\\Code\\github\\matis\\doc/tools.SaveText.md","e:\\Code\\github\\matis\\doc/tools.ShellExec.md"]}}
,{"action":"POST","src":"ForEachJS","srcAtt":"path","dst":"DocPath","dstAtt":"void","value":["e:\\Code\\github\\matis\\doc/tools.BaseName.md","e:\\Code\\github\\matis\\doc/tools.BlackHole.md","e:\\Code\\github\\matis\\doc/tools.ChangeExtension.md","e:\\Code\\github\\matis\\doc/tools.ConcatStrings.md","e:\\Code\\github\\matis\\doc/tools.ConsoleLog.md","e:\\Code\\github\\matis\\doc/tools.Constant.md","e:\\Code\\github\\matis\\doc/tools.DirName.md","e:\\Code\\github\\matis\\doc/tools.ExistsFile.md","e:\\Code\\github\\matis\\doc/tools.ForEach.md","e:\\Code\\github\\matis\\doc/tools.Join.md","e:\\Code\\github\\matis\\doc/tools.LoadStream.md","e:\\Code\\github\\matis\\doc/tools.LoadText.md","e:\\Code\\github\\matis\\doc/tools.MatchRegexp.md","e:\\Code\\github\\matis\\doc/tools.Nop.md","e:\\Code\\github\\matis\\doc/tools.PrefixSuffix.md","e:\\Code\\github\\matis\\doc/tools.ReadDir.md","e:\\Code\\github\\matis\\doc/tools.SaveText.md","e:\\Code\\github\\matis\\doc/tools.ShellExec.md"]}
,{"action":"IN","tool":"DocPath","input":{"void":["e:\\Code\\github\\matis\\doc/tools.BaseName.md","e:\\Code\\github\\matis\\doc/tools.BlackHole.md","e:\\Code\\github\\matis\\doc/tools.ChangeExtension.md","e:\\Code\\github\\matis\\doc/tools.ConcatStrings.md","e:\\Code\\github\\matis\\doc/tools.ConsoleLog.md","e:\\Code\\github\\matis\\doc/tools.Constant.md","e:\\Code\\github\\matis\\doc/tools.DirName.md","e:\\Code\\github\\matis\\doc/tools.ExistsFile.md","e:\\Code\\github\\matis\\doc/tools.ForEach.md","e:\\Code\\github\\matis\\doc/tools.Join.md","e:\\Code\\github\\matis\\doc/tools.LoadStream.md","e:\\Code\\github\\matis\\doc/tools.LoadText.md","e:\\Code\\github\\matis\\doc/tools.MatchRegexp.md","e:\\Code\\github\\matis\\doc/tools.Nop.md","e:\\Code\\github\\matis\\doc/tools.PrefixSuffix.md","e:\\Code\\github\\matis\\doc/tools.ReadDir.md","e:\\Code\\github\\matis\\doc/tools.SaveText.md","e:\\Code\\github\\matis\\doc/tools.ShellExec.md"]}}
,{"action":"OUT","tool":"DocPath","output":{"value":"e:\\Code\\github\\matis\\doc"}}
,{"action":"POST","src":"DocPath","srcAtt":"value","dst":"ListPages","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc"}
,{"action":"IN","tool":"ListPages","input":{"path":"e:\\Code\\github\\matis\\doc"}}
,{"action":"OUT","tool":"ListPages","output":{"files":["e:\\Code\\github\\matis\\doc\\index.md","e:\\Code\\github\\matis\\doc\\index.md~","e:\\Code\\github\\matis\\doc\\tools.BaseName.md","e:\\Code\\github\\matis\\doc\\tools.BlackHole.md","e:\\Code\\github\\matis\\doc\\tools.ChangeExtension.md","e:\\Code\\github\\matis\\doc\\tools.ConcatStrings.md","e:\\Code\\github\\matis\\doc\\tools.ConsoleLog.md","e:\\Code\\github\\matis\\doc\\tools.Constant.md","e:\\Code\\github\\matis\\doc\\tools.DirName.md","e:\\Code\\github\\matis\\doc\\tools.ExistsFile.md","e:\\Code\\github\\matis\\doc\\tools.ForEach.md","e:\\Code\\github\\matis\\doc\\tools.Join.md","e:\\Code\\github\\matis\\doc\\tools.L.shellExec.md","e:\\Code\\github\\matis\\doc\\tools.LoadStream.md","e:\\Code\\github\\matis\\doc\\tools.LoadText.md","e:\\Code\\github\\matis\\doc\\tools.MatchRegexp.md","e:\\Code\\github\\matis\\doc\\tools.Nop.md","e:\\Code\\github\\matis\\doc\\tools.PrefixSuffix.md","e:\\Code\\github\\matis\\doc\\tools.ReadDir.md","e:\\Code\\github\\matis\\doc\\tools.SaveText.md","e:\\Code\\github\\matis\\doc\\tools.ShellExec.md","e:\\Code\\github\\matis\\doc\\tools.SvgToDataurl.md"]}}
,{"action":"POST","src":"ListPages","srcAtt":"files","dst":"ForEachMD","dstAtt":"any","value":["e:\\Code\\github\\matis\\doc\\index.md","e:\\Code\\github\\matis\\doc\\index.md~","e:\\Code\\github\\matis\\doc\\tools.BaseName.md","e:\\Code\\github\\matis\\doc\\tools.BlackHole.md","e:\\Code\\github\\matis\\doc\\tools.ChangeExtension.md","e:\\Code\\github\\matis\\doc\\tools.ConcatStrings.md","e:\\Code\\github\\matis\\doc\\tools.ConsoleLog.md","e:\\Code\\github\\matis\\doc\\tools.Constant.md","e:\\Code\\github\\matis\\doc\\tools.DirName.md","e:\\Code\\github\\matis\\doc\\tools.ExistsFile.md","e:\\Code\\github\\matis\\doc\\tools.ForEach.md","e:\\Code\\github\\matis\\doc\\tools.Join.md","e:\\Code\\github\\matis\\doc\\tools.L.shellExec.md","e:\\Code\\github\\matis\\doc\\tools.LoadStream.md","e:\\Code\\github\\matis\\doc\\tools.LoadText.md","e:\\Code\\github\\matis\\doc\\tools.MatchRegexp.md","e:\\Code\\github\\matis\\doc\\tools.Nop.md","e:\\Code\\github\\matis\\doc\\tools.PrefixSuffix.md","e:\\Code\\github\\matis\\doc\\tools.ReadDir.md","e:\\Code\\github\\matis\\doc\\tools.SaveText.md","e:\\Code\\github\\matis\\doc\\tools.ShellExec.md","e:\\Code\\github\\matis\\doc\\tools.SvgToDataurl.md"]}
,{"action":"IN","tool":"ForEachMD","input":{"any":["e:\\Code\\github\\matis\\doc\\index.md","e:\\Code\\github\\matis\\doc\\index.md~","e:\\Code\\github\\matis\\doc\\tools.BaseName.md","e:\\Code\\github\\matis\\doc\\tools.BlackHole.md","e:\\Code\\github\\matis\\doc\\tools.ChangeExtension.md","e:\\Code\\github\\matis\\doc\\tools.ConcatStrings.md","e:\\Code\\github\\matis\\doc\\tools.ConsoleLog.md","e:\\Code\\github\\matis\\doc\\tools.Constant.md","e:\\Code\\github\\matis\\doc\\tools.DirName.md","e:\\Code\\github\\matis\\doc\\tools.ExistsFile.md","e:\\Code\\github\\matis\\doc\\tools.ForEach.md","e:\\Code\\github\\matis\\doc\\tools.Join.md","e:\\Code\\github\\matis\\doc\\tools.L.shellExec.md","e:\\Code\\github\\matis\\doc\\tools.LoadStream.md","e:\\Code\\github\\matis\\doc\\tools.LoadText.md","e:\\Code\\github\\matis\\doc\\tools.MatchRegexp.md","e:\\Code\\github\\matis\\doc\\tools.Nop.md","e:\\Code\\github\\matis\\doc\\tools.PrefixSuffix.md","e:\\Code\\github\\matis\\doc\\tools.ReadDir.md","e:\\Code\\github\\matis\\doc\\tools.SaveText.md","e:\\Code\\github\\matis\\doc\\tools.ShellExec.md","e:\\Code\\github\\matis\\doc\\tools.SvgToDataurl.md"]}}
,{"action":"IN","tool":"Start","input":{"$tag":0,"any":"e:\\Code\\github\\matis\\doc\\index.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\index.md","$tag":0}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\index.md","output":0}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":0,"path":"e:\\Code\\github\\matis\\doc\\index.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\index.md","output":0}
,{"action":"IN","tool":"BaseName","input":{"$tag":0,"path":"e:\\Code\\github\\matis\\doc\\index.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"index.md","$tag":0}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"index.md","output":0}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":0,"path":"index.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"index.html","$tag":0}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"index.html","output":0}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":0,"text":"index.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/index.html","$tag":0}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/index.html","output":0}
,{"action":"IN","tool":"Start","input":{"$tag":1,"any":"e:\\Code\\github\\matis\\doc\\index.md~"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\index.md~","$tag":1}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\index.md~","output":1}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":1,"path":"e:\\Code\\github\\matis\\doc\\index.md~"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\index.md~","output":1}
,{"action":"IN","tool":"BaseName","input":{"$tag":1,"path":"e:\\Code\\github\\matis\\doc\\index.md~"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"index.md~","$tag":1}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"index.md~","output":1}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":1,"path":"index.md~"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"index.md~","$tag":1}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"index.md~","output":1}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":1,"text":"index.md~"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/index.md~","$tag":1}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/index.md~","output":1}
,{"action":"IN","tool":"Start","input":{"$tag":2,"any":"e:\\Code\\github\\matis\\doc\\tools.BaseName.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.BaseName.md","$tag":2}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.BaseName.md","output":2}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":2,"path":"e:\\Code\\github\\matis\\doc\\tools.BaseName.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.BaseName.md","output":2}
,{"action":"IN","tool":"BaseName","input":{"$tag":2,"path":"e:\\Code\\github\\matis\\doc\\tools.BaseName.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.BaseName.md","$tag":2}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.BaseName.md","output":2}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":2,"path":"tools.BaseName.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.BaseName.html","$tag":2}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.BaseName.html","output":2}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":2,"text":"tools.BaseName.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.BaseName.html","$tag":2}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.BaseName.html","output":2}
,{"action":"IN","tool":"Start","input":{"$tag":3,"any":"e:\\Code\\github\\matis\\doc\\tools.BlackHole.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.BlackHole.md","$tag":3}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.BlackHole.md","output":3}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":3,"path":"e:\\Code\\github\\matis\\doc\\tools.BlackHole.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.BlackHole.md","output":3}
,{"action":"IN","tool":"BaseName","input":{"$tag":3,"path":"e:\\Code\\github\\matis\\doc\\tools.BlackHole.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.BlackHole.md","$tag":3}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.BlackHole.md","output":3}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":3,"path":"tools.BlackHole.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.BlackHole.html","$tag":3}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.BlackHole.html","output":3}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":3,"text":"tools.BlackHole.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.BlackHole.html","$tag":3}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.BlackHole.html","output":3}
,{"action":"IN","tool":"Start","input":{"$tag":4,"any":"e:\\Code\\github\\matis\\doc\\tools.ChangeExtension.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.ChangeExtension.md","$tag":4}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ChangeExtension.md","output":4}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":4,"path":"e:\\Code\\github\\matis\\doc\\tools.ChangeExtension.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ChangeExtension.md","output":4}
,{"action":"IN","tool":"BaseName","input":{"$tag":4,"path":"e:\\Code\\github\\matis\\doc\\tools.ChangeExtension.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.ChangeExtension.md","$tag":4}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.ChangeExtension.md","output":4}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":4,"path":"tools.ChangeExtension.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.ChangeExtension.html","$tag":4}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.ChangeExtension.html","output":4}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":4,"text":"tools.ChangeExtension.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.ChangeExtension.html","$tag":4}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.ChangeExtension.html","output":4}
,{"action":"IN","tool":"Start","input":{"$tag":5,"any":"e:\\Code\\github\\matis\\doc\\tools.ConcatStrings.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.ConcatStrings.md","$tag":5}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ConcatStrings.md","output":5}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":5,"path":"e:\\Code\\github\\matis\\doc\\tools.ConcatStrings.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ConcatStrings.md","output":5}
,{"action":"IN","tool":"BaseName","input":{"$tag":5,"path":"e:\\Code\\github\\matis\\doc\\tools.ConcatStrings.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.ConcatStrings.md","$tag":5}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.ConcatStrings.md","output":5}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":5,"path":"tools.ConcatStrings.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.ConcatStrings.html","$tag":5}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.ConcatStrings.html","output":5}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":5,"text":"tools.ConcatStrings.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.ConcatStrings.html","$tag":5}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.ConcatStrings.html","output":5}
,{"action":"IN","tool":"Start","input":{"$tag":6,"any":"e:\\Code\\github\\matis\\doc\\tools.ConsoleLog.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.ConsoleLog.md","$tag":6}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ConsoleLog.md","output":6}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":6,"path":"e:\\Code\\github\\matis\\doc\\tools.ConsoleLog.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ConsoleLog.md","output":6}
,{"action":"IN","tool":"BaseName","input":{"$tag":6,"path":"e:\\Code\\github\\matis\\doc\\tools.ConsoleLog.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.ConsoleLog.md","$tag":6}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.ConsoleLog.md","output":6}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":6,"path":"tools.ConsoleLog.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.ConsoleLog.html","$tag":6}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.ConsoleLog.html","output":6}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":6,"text":"tools.ConsoleLog.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.ConsoleLog.html","$tag":6}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.ConsoleLog.html","output":6}
,{"action":"IN","tool":"Start","input":{"$tag":7,"any":"e:\\Code\\github\\matis\\doc\\tools.Constant.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.Constant.md","$tag":7}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.Constant.md","output":7}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":7,"path":"e:\\Code\\github\\matis\\doc\\tools.Constant.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.Constant.md","output":7}
,{"action":"IN","tool":"BaseName","input":{"$tag":7,"path":"e:\\Code\\github\\matis\\doc\\tools.Constant.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.Constant.md","$tag":7}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.Constant.md","output":7}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":7,"path":"tools.Constant.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.Constant.html","$tag":7}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.Constant.html","output":7}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":7,"text":"tools.Constant.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.Constant.html","$tag":7}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.Constant.html","output":7}
,{"action":"IN","tool":"Start","input":{"$tag":8,"any":"e:\\Code\\github\\matis\\doc\\tools.DirName.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.DirName.md","$tag":8}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.DirName.md","output":8}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":8,"path":"e:\\Code\\github\\matis\\doc\\tools.DirName.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.DirName.md","output":8}
,{"action":"IN","tool":"BaseName","input":{"$tag":8,"path":"e:\\Code\\github\\matis\\doc\\tools.DirName.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.DirName.md","$tag":8}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.DirName.md","output":8}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":8,"path":"tools.DirName.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.DirName.html","$tag":8}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.DirName.html","output":8}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":8,"text":"tools.DirName.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.DirName.html","$tag":8}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.DirName.html","output":8}
,{"action":"IN","tool":"Start","input":{"$tag":9,"any":"e:\\Code\\github\\matis\\doc\\tools.ExistsFile.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.ExistsFile.md","$tag":9}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ExistsFile.md","output":9}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":9,"path":"e:\\Code\\github\\matis\\doc\\tools.ExistsFile.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ExistsFile.md","output":9}
,{"action":"IN","tool":"BaseName","input":{"$tag":9,"path":"e:\\Code\\github\\matis\\doc\\tools.ExistsFile.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.ExistsFile.md","$tag":9}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.ExistsFile.md","output":9}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":9,"path":"tools.ExistsFile.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.ExistsFile.html","$tag":9}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.ExistsFile.html","output":9}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":9,"text":"tools.ExistsFile.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.ExistsFile.html","$tag":9}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.ExistsFile.html","output":9}
,{"action":"IN","tool":"Start","input":{"$tag":10,"any":"e:\\Code\\github\\matis\\doc\\tools.ForEach.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.ForEach.md","$tag":10}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ForEach.md","output":10}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":10,"path":"e:\\Code\\github\\matis\\doc\\tools.ForEach.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ForEach.md","output":10}
,{"action":"IN","tool":"BaseName","input":{"$tag":10,"path":"e:\\Code\\github\\matis\\doc\\tools.ForEach.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.ForEach.md","$tag":10}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.ForEach.md","output":10}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":10,"path":"tools.ForEach.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.ForEach.html","$tag":10}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.ForEach.html","output":10}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":10,"text":"tools.ForEach.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.ForEach.html","$tag":10}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.ForEach.html","output":10}
,{"action":"IN","tool":"Start","input":{"$tag":11,"any":"e:\\Code\\github\\matis\\doc\\tools.Join.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.Join.md","$tag":11}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.Join.md","output":11}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":11,"path":"e:\\Code\\github\\matis\\doc\\tools.Join.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.Join.md","output":11}
,{"action":"IN","tool":"BaseName","input":{"$tag":11,"path":"e:\\Code\\github\\matis\\doc\\tools.Join.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.Join.md","$tag":11}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.Join.md","output":11}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":11,"path":"tools.Join.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.Join.html","$tag":11}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.Join.html","output":11}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":11,"text":"tools.Join.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.Join.html","$tag":11}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.Join.html","output":11}
,{"action":"IN","tool":"Start","input":{"$tag":12,"any":"e:\\Code\\github\\matis\\doc\\tools.L.shellExec.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.L.shellExec.md","$tag":12}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.L.shellExec.md","output":12}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":12,"path":"e:\\Code\\github\\matis\\doc\\tools.L.shellExec.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.L.shellExec.md","output":12}
,{"action":"IN","tool":"BaseName","input":{"$tag":12,"path":"e:\\Code\\github\\matis\\doc\\tools.L.shellExec.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.L.shellExec.md","$tag":12}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.L.shellExec.md","output":12}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":12,"path":"tools.L.shellExec.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.L.shellExec.html","$tag":12}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.L.shellExec.html","output":12}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":12,"text":"tools.L.shellExec.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.L.shellExec.html","$tag":12}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.L.shellExec.html","output":12}
,{"action":"IN","tool":"Start","input":{"$tag":13,"any":"e:\\Code\\github\\matis\\doc\\tools.LoadStream.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.LoadStream.md","$tag":13}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.LoadStream.md","output":13}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":13,"path":"e:\\Code\\github\\matis\\doc\\tools.LoadStream.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.LoadStream.md","output":13}
,{"action":"IN","tool":"BaseName","input":{"$tag":13,"path":"e:\\Code\\github\\matis\\doc\\tools.LoadStream.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.LoadStream.md","$tag":13}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.LoadStream.md","output":13}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":13,"path":"tools.LoadStream.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.LoadStream.html","$tag":13}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.LoadStream.html","output":13}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":13,"text":"tools.LoadStream.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.LoadStream.html","$tag":13}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.LoadStream.html","output":13}
,{"action":"IN","tool":"Start","input":{"$tag":14,"any":"e:\\Code\\github\\matis\\doc\\tools.LoadText.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.LoadText.md","$tag":14}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.LoadText.md","output":14}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":14,"path":"e:\\Code\\github\\matis\\doc\\tools.LoadText.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.LoadText.md","output":14}
,{"action":"IN","tool":"BaseName","input":{"$tag":14,"path":"e:\\Code\\github\\matis\\doc\\tools.LoadText.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.LoadText.md","$tag":14}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.LoadText.md","output":14}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":14,"path":"tools.LoadText.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.LoadText.html","$tag":14}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.LoadText.html","output":14}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":14,"text":"tools.LoadText.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.LoadText.html","$tag":14}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.LoadText.html","output":14}
,{"action":"IN","tool":"Start","input":{"$tag":15,"any":"e:\\Code\\github\\matis\\doc\\tools.MatchRegexp.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.MatchRegexp.md","$tag":15}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.MatchRegexp.md","output":15}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":15,"path":"e:\\Code\\github\\matis\\doc\\tools.MatchRegexp.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.MatchRegexp.md","output":15}
,{"action":"IN","tool":"BaseName","input":{"$tag":15,"path":"e:\\Code\\github\\matis\\doc\\tools.MatchRegexp.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.MatchRegexp.md","$tag":15}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.MatchRegexp.md","output":15}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":15,"path":"tools.MatchRegexp.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.MatchRegexp.html","$tag":15}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.MatchRegexp.html","output":15}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":15,"text":"tools.MatchRegexp.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.MatchRegexp.html","$tag":15}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.MatchRegexp.html","output":15}
,{"action":"IN","tool":"Start","input":{"$tag":16,"any":"e:\\Code\\github\\matis\\doc\\tools.Nop.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.Nop.md","$tag":16}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.Nop.md","output":16}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":16,"path":"e:\\Code\\github\\matis\\doc\\tools.Nop.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.Nop.md","output":16}
,{"action":"IN","tool":"BaseName","input":{"$tag":16,"path":"e:\\Code\\github\\matis\\doc\\tools.Nop.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.Nop.md","$tag":16}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.Nop.md","output":16}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":16,"path":"tools.Nop.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.Nop.html","$tag":16}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.Nop.html","output":16}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":16,"text":"tools.Nop.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.Nop.html","$tag":16}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.Nop.html","output":16}
,{"action":"IN","tool":"Start","input":{"$tag":17,"any":"e:\\Code\\github\\matis\\doc\\tools.PrefixSuffix.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.PrefixSuffix.md","$tag":17}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.PrefixSuffix.md","output":17}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":17,"path":"e:\\Code\\github\\matis\\doc\\tools.PrefixSuffix.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.PrefixSuffix.md","output":17}
,{"action":"IN","tool":"BaseName","input":{"$tag":17,"path":"e:\\Code\\github\\matis\\doc\\tools.PrefixSuffix.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.PrefixSuffix.md","$tag":17}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.PrefixSuffix.md","output":17}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":17,"path":"tools.PrefixSuffix.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.PrefixSuffix.html","$tag":17}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.PrefixSuffix.html","output":17}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":17,"text":"tools.PrefixSuffix.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.PrefixSuffix.html","$tag":17}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.PrefixSuffix.html","output":17}
,{"action":"IN","tool":"Start","input":{"$tag":18,"any":"e:\\Code\\github\\matis\\doc\\tools.ReadDir.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.ReadDir.md","$tag":18}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ReadDir.md","output":18}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":18,"path":"e:\\Code\\github\\matis\\doc\\tools.ReadDir.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ReadDir.md","output":18}
,{"action":"IN","tool":"BaseName","input":{"$tag":18,"path":"e:\\Code\\github\\matis\\doc\\tools.ReadDir.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.ReadDir.md","$tag":18}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.ReadDir.md","output":18}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":18,"path":"tools.ReadDir.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.ReadDir.html","$tag":18}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.ReadDir.html","output":18}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":18,"text":"tools.ReadDir.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.ReadDir.html","$tag":18}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.ReadDir.html","output":18}
,{"action":"IN","tool":"Start","input":{"$tag":19,"any":"e:\\Code\\github\\matis\\doc\\tools.SaveText.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.SaveText.md","$tag":19}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.SaveText.md","output":19}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":19,"path":"e:\\Code\\github\\matis\\doc\\tools.SaveText.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.SaveText.md","output":19}
,{"action":"IN","tool":"BaseName","input":{"$tag":19,"path":"e:\\Code\\github\\matis\\doc\\tools.SaveText.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.SaveText.md","$tag":19}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.SaveText.md","output":19}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":19,"path":"tools.SaveText.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.SaveText.html","$tag":19}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.SaveText.html","output":19}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":19,"text":"tools.SaveText.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.SaveText.html","$tag":19}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.SaveText.html","output":19}
,{"action":"IN","tool":"Start","input":{"$tag":20,"any":"e:\\Code\\github\\matis\\doc\\tools.ShellExec.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.ShellExec.md","$tag":20}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ShellExec.md","output":20}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":20,"path":"e:\\Code\\github\\matis\\doc\\tools.ShellExec.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.ShellExec.md","output":20}
,{"action":"IN","tool":"BaseName","input":{"$tag":20,"path":"e:\\Code\\github\\matis\\doc\\tools.ShellExec.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.ShellExec.md","$tag":20}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.ShellExec.md","output":20}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":20,"path":"tools.ShellExec.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.ShellExec.html","$tag":20}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.ShellExec.html","output":20}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":20,"text":"tools.ShellExec.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.ShellExec.html","$tag":20}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.ShellExec.html","output":20}
,{"action":"IN","tool":"Start","input":{"$tag":21,"any":"e:\\Code\\github\\matis\\doc\\tools.SvgToDataurl.md"}}
,{"action":"OUT","tool":"Start","output":{"any":"e:\\Code\\github\\matis\\doc\\tools.SvgToDataurl.md","$tag":21}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"LoadMdCode","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.SvgToDataurl.md","output":21}
,{"action":"IN","tool":"LoadMdCode","input":{"$tag":21,"path":"e:\\Code\\github\\matis\\doc\\tools.SvgToDataurl.md"}}
,{"action":"POST","src":"Start","srcAtt":"any","dst":"BaseName","dstAtt":"path","value":"e:\\Code\\github\\matis\\doc\\tools.SvgToDataurl.md","output":21}
,{"action":"IN","tool":"BaseName","input":{"$tag":21,"path":"e:\\Code\\github\\matis\\doc\\tools.SvgToDataurl.md"}}
,{"action":"OUT","tool":"BaseName","output":{"basename":"tools.SvgToDataurl.md","$tag":21}}
,{"action":"POST","src":"BaseName","srcAtt":"basename","dst":"ChangeExtension","dstAtt":"path","value":"tools.SvgToDataurl.md","output":21}
,{"action":"IN","tool":"ChangeExtension","input":{"$tag":21,"path":"tools.SvgToDataurl.md"}}
,{"action":"OUT","tool":"ChangeExtension","output":{"path":"tools.SvgToDataurl.html","$tag":21}}
,{"action":"POST","src":"ChangeExtension","srcAtt":"path","dst":"HtmlFilename","dstAtt":"text","value":"tools.SvgToDataurl.html","output":21}
,{"action":"IN","tool":"HtmlFilename","input":{"$tag":21,"text":"tools.SvgToDataurl.html"}}
,{"action":"OUT","tool":"HtmlFilename","output":{"text":"e:\\Code\\github\\matis\\gh-pages/tools.SvgToDataurl.html","$tag":21}}
,{"action":"POST","src":"HtmlFilename","srcAtt":"text","dst":"SaveHTML","dstAtt":"path","value":"e:\\Code\\github\\matis\\gh-pages/tools.SvgToDataurl.html","output":21}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"_Fast complex asynchronous processes made easy_\r\n\r\n\r\n# Concepts\r\n\r\n* __[Input driven execution](input-driven-exec.html)__: processing starts as soon as input is ready.\r\n* __Parallelism__: tools are executed in parallel if it gives a time benefit. The result is a very fast process.\r\n* __Inputs order preserved__: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.\r\n* __Tracability__: you always know which input has been needed to produce any output.\r\n\r\n# Built-in tools\r\n\r\n* [__BaseName__](tools.BaseName.html): basename of a path.\r\n* [__BlackHole__](tools.BlackHole.html): swallow garbaged outputs.\r\n* [__ChangeExtension__](tools.ChangeExtension.html): change extension of a filename.\r\n* [__ConcatStrings__](tools.ConcatStrings.html): concat many strings.\r\n* [__ConsoleLog__](tools.ConsoleLog.html): log messages for debug.\r\n* [__Constant__](tools.Constant.html): outputs a constant.\r\n* [__DirName__](tools.DirName.html): dirname of a path.\r\n* [__ExistsFile__](tools.ExistsFile.html): test file existence.\r\n* [__ForEach__](tools.ForEach.html): loop on each element of an array.\r\n* [__Join__](tools.Join.html): join elements of an array.\r\n* [__LoadStream__](tools.LoadStream.html): load file as a stream.\r\n* [__LoadText__](tools.LoadText.html): load file as a string.\r\n* [__MatchRegexp__](tools.MatchRegexp.html): match a string against a regular expression.\r\n* [__Nop__](tools.Nop.html): No operation.\r\n* [__PrefixSuffix__](tools.PrefixSuffix.html): surround a string with two constants.\r\n* [__ReadDir__](tools.ReadDir.html): list all files and subdirectories in a directory.\r\n* [__SaveText__](tools.SaveText.html): store string into a file.\r\n* [__ShellExec__](tools.ShellExec.html): execute a shell command.\r\n","$tag":0}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"_Fast complex asynchronous processes made easy_\r\n\r\n\r\n# Concepts\r\n\r\n* __[Input driven execution](input-driven-exec.html)__: processing starts as soon as input is ready.\r\n* __Parallelism__: tools are executed in parallel if it gives a time benefit. The result is a very fast process.\r\n* __Inputs order preserved__: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.\r\n* __Tracability__: you always know which input has been needed to produce any output.\r\n\r\n# Built-in tools\r\n\r\n* [__BaseName__](tools.BaseName.html): basename of a path.\r\n* [__BlackHole__](tools.BlackHole.html): swallow garbaged outputs.\r\n* [__ChangeExtension__](tools.ChangeExtension.html): change extension of a filename.\r\n* [__ConcatStrings__](tools.ConcatStrings.html): concat many strings.\r\n* [__ConsoleLog__](tools.ConsoleLog.html): log messages for debug.\r\n* [__Constant__](tools.Constant.html): outputs a constant.\r\n* [__DirName__](tools.DirName.html): dirname of a path.\r\n* [__ExistsFile__](tools.ExistsFile.html): test file existence.\r\n* [__ForEach__](tools.ForEach.html): loop on each element of an array.\r\n* [__Join__](tools.Join.html): join elements of an array.\r\n* [__LoadStream__](tools.LoadStream.html): load file as a stream.\r\n* [__LoadText__](tools.LoadText.html): load file as a string.\r\n* [__MatchRegexp__](tools.MatchRegexp.html): match a string against a regular expression.\r\n* [__Nop__](tools.Nop.html): No operation.\r\n* [__PrefixSuffix__](tools.PrefixSuffix.html): surround a string with two constants.\r\n* [__ReadDir__](tools.ReadDir.html): list all files and subdirectories in a directory.\r\n* [__SaveText__](tools.SaveText.html): store string into a file.\r\n* [__ShellExec__](tools.ShellExec.html): execute a shell command.\r\n","output":0}
,{"action":"IN","tool":"Markdown","input":{"$tag":0,"md":"_Fast complex asynchronous processes made easy_\r\n\r\n\r\n# Concepts\r\n\r\n* __[Input driven execution](input-driven-exec.html)__: processing starts as soon as input is ready.\r\n* __Parallelism__: tools are executed in parallel if it gives a time benefit. The result is a very fast process.\r\n* __Inputs order preserved__: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.\r\n* __Tracability__: you always know which input has been needed to produce any output.\r\n\r\n# Built-in tools\r\n\r\n* [__BaseName__](tools.BaseName.html): basename of a path.\r\n* [__BlackHole__](tools.BlackHole.html): swallow garbaged outputs.\r\n* [__ChangeExtension__](tools.ChangeExtension.html): change extension of a filename.\r\n* [__ConcatStrings__](tools.ConcatStrings.html): concat many strings.\r\n* [__ConsoleLog__](tools.ConsoleLog.html): log messages for debug.\r\n* [__Constant__](tools.Constant.html): outputs a constant.\r\n* [__DirName__](tools.DirName.html): dirname of a path.\r\n* [__ExistsFile__](tools.ExistsFile.html): test file existence.\r\n* [__ForEach__](tools.ForEach.html): loop on each element of an array.\r\n* [__Join__](tools.Join.html): join elements of an array.\r\n* [__LoadStream__](tools.LoadStream.html): load file as a stream.\r\n* [__LoadText__](tools.LoadText.html): load file as a string.\r\n* [__MatchRegexp__](tools.MatchRegexp.html): match a string against a regular expression.\r\n* [__Nop__](tools.Nop.html): No operation.\r\n* [__PrefixSuffix__](tools.PrefixSuffix.html): surround a string with two constants.\r\n* [__ReadDir__](tools.ReadDir.html): list all files and subdirectories in a directory.\r\n* [__SaveText__](tools.SaveText.html): store string into a file.\r\n* [__ShellExec__](tools.ShellExec.html): execute a shell command.\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n<h1>Built-in tools</h1>\n<ul>\n<li><a href=\"tools.BaseName.html\"><strong>BaseName</strong></a>: basename of a path.</li>\n<li><a href=\"tools.BlackHole.html\"><strong>BlackHole</strong></a>: swallow garbaged outputs.</li>\n<li><a href=\"tools.ChangeExtension.html\"><strong>ChangeExtension</strong></a>: change extension of a filename.</li>\n<li><a href=\"tools.ConcatStrings.html\"><strong>ConcatStrings</strong></a>: concat many strings.</li>\n<li><a href=\"tools.ConsoleLog.html\"><strong>ConsoleLog</strong></a>: log messages for debug.</li>\n<li><a href=\"tools.Constant.html\"><strong>Constant</strong></a>: outputs a constant.</li>\n<li><a href=\"tools.DirName.html\"><strong>DirName</strong></a>: dirname of a path.</li>\n<li><a href=\"tools.ExistsFile.html\"><strong>ExistsFile</strong></a>: test file existence.</li>\n<li><a href=\"tools.ForEach.html\"><strong>ForEach</strong></a>: loop on each element of an array.</li>\n<li><a href=\"tools.Join.html\"><strong>Join</strong></a>: join elements of an array.</li>\n<li><a href=\"tools.LoadStream.html\"><strong>LoadStream</strong></a>: load file as a stream.</li>\n<li><a href=\"tools.LoadText.html\"><strong>LoadText</strong></a>: load file as a string.</li>\n<li><a href=\"tools.MatchRegexp.html\"><strong>MatchRegexp</strong></a>: match a string against a regular expression.</li>\n<li><a href=\"tools.Nop.html\"><strong>Nop</strong></a>: No operation.</li>\n<li><a href=\"tools.PrefixSuffix.html\"><strong>PrefixSuffix</strong></a>: surround a string with two constants.</li>\n<li><a href=\"tools.ReadDir.html\"><strong>ReadDir</strong></a>: list all files and subdirectories in a directory.</li>\n<li><a href=\"tools.SaveText.html\"><strong>SaveText</strong></a>: store string into a file.</li>\n<li><a href=\"tools.ShellExec.html\"><strong>ShellExec</strong></a>: execute a shell command.</li>\n</ul>\n","$tag":0}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n<h1>Built-in tools</h1>\n<ul>\n<li><a href=\"tools.BaseName.html\"><strong>BaseName</strong></a>: basename of a path.</li>\n<li><a href=\"tools.BlackHole.html\"><strong>BlackHole</strong></a>: swallow garbaged outputs.</li>\n<li><a href=\"tools.ChangeExtension.html\"><strong>ChangeExtension</strong></a>: change extension of a filename.</li>\n<li><a href=\"tools.ConcatStrings.html\"><strong>ConcatStrings</strong></a>: concat many strings.</li>\n<li><a href=\"tools.ConsoleLog.html\"><strong>ConsoleLog</strong></a>: log messages for debug.</li>\n<li><a href=\"tools.Constant.html\"><strong>Constant</strong></a>: outputs a constant.</li>\n<li><a href=\"tools.DirName.html\"><strong>DirName</strong></a>: dirname of a path.</li>\n<li><a href=\"tools.ExistsFile.html\"><strong>ExistsFile</strong></a>: test file existence.</li>\n<li><a href=\"tools.ForEach.html\"><strong>ForEach</strong></a>: loop on each element of an array.</li>\n<li><a href=\"tools.Join.html\"><strong>Join</strong></a>: join elements of an array.</li>\n<li><a href=\"tools.LoadStream.html\"><strong>LoadStream</strong></a>: load file as a stream.</li>\n<li><a href=\"tools.LoadText.html\"><strong>LoadText</strong></a>: load file as a string.</li>\n<li><a href=\"tools.MatchRegexp.html\"><strong>MatchRegexp</strong></a>: match a string against a regular expression.</li>\n<li><a href=\"tools.Nop.html\"><strong>Nop</strong></a>: No operation.</li>\n<li><a href=\"tools.PrefixSuffix.html\"><strong>PrefixSuffix</strong></a>: surround a string with two constants.</li>\n<li><a href=\"tools.ReadDir.html\"><strong>ReadDir</strong></a>: list all files and subdirectories in a directory.</li>\n<li><a href=\"tools.SaveText.html\"><strong>SaveText</strong></a>: store string into a file.</li>\n<li><a href=\"tools.ShellExec.html\"><strong>ShellExec</strong></a>: execute a shell command.</li>\n</ul>\n","output":0}
,{"action":"IN","tool":"Combine","input":{"$tag":0,"body":"<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n<h1>Built-in tools</h1>\n<ul>\n<li><a href=\"tools.BaseName.html\"><strong>BaseName</strong></a>: basename of a path.</li>\n<li><a href=\"tools.BlackHole.html\"><strong>BlackHole</strong></a>: swallow garbaged outputs.</li>\n<li><a href=\"tools.ChangeExtension.html\"><strong>ChangeExtension</strong></a>: change extension of a filename.</li>\n<li><a href=\"tools.ConcatStrings.html\"><strong>ConcatStrings</strong></a>: concat many strings.</li>\n<li><a href=\"tools.ConsoleLog.html\"><strong>ConsoleLog</strong></a>: log messages for debug.</li>\n<li><a href=\"tools.Constant.html\"><strong>Constant</strong></a>: outputs a constant.</li>\n<li><a href=\"tools.DirName.html\"><strong>DirName</strong></a>: dirname of a path.</li>\n<li><a href=\"tools.ExistsFile.html\"><strong>ExistsFile</strong></a>: test file existence.</li>\n<li><a href=\"tools.ForEach.html\"><strong>ForEach</strong></a>: loop on each element of an array.</li>\n<li><a href=\"tools.Join.html\"><strong>Join</strong></a>: join elements of an array.</li>\n<li><a href=\"tools.LoadStream.html\"><strong>LoadStream</strong></a>: load file as a stream.</li>\n<li><a href=\"tools.LoadText.html\"><strong>LoadText</strong></a>: load file as a string.</li>\n<li><a href=\"tools.MatchRegexp.html\"><strong>MatchRegexp</strong></a>: match a string against a regular expression.</li>\n<li><a href=\"tools.Nop.html\"><strong>Nop</strong></a>: No operation.</li>\n<li><a href=\"tools.PrefixSuffix.html\"><strong>PrefixSuffix</strong></a>: surround a string with two constants.</li>\n<li><a href=\"tools.ReadDir.html\"><strong>ReadDir</strong></a>: list all files and subdirectories in a directory.</li>\n<li><a href=\"tools.SaveText.html\"><strong>SaveText</strong></a>: store string into a file.</li>\n<li><a href=\"tools.ShellExec.html\"><strong>ShellExec</strong></a>: execute a shell command.</li>\n</ul>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n<h1>Built-in tools</h1>\n<ul>\n<li><a href=\"tools.BaseName.html\"><strong>BaseName</strong></a>: basename of a path.</li>\n<li><a href=\"tools.BlackHole.html\"><strong>BlackHole</strong></a>: swallow garbaged outputs.</li>\n<li><a href=\"tools.ChangeExtension.html\"><strong>ChangeExtension</strong></a>: change extension of a filename.</li>\n<li><a href=\"tools.ConcatStrings.html\"><strong>ConcatStrings</strong></a>: concat many strings.</li>\n<li><a href=\"tools.ConsoleLog.html\"><strong>ConsoleLog</strong></a>: log messages for debug.</li>\n<li><a href=\"tools.Constant.html\"><strong>Constant</strong></a>: outputs a constant.</li>\n<li><a href=\"tools.DirName.html\"><strong>DirName</strong></a>: dirname of a path.</li>\n<li><a href=\"tools.ExistsFile.html\"><strong>ExistsFile</strong></a>: test file existence.</li>\n<li><a href=\"tools.ForEach.html\"><strong>ForEach</strong></a>: loop on each element of an array.</li>\n<li><a href=\"tools.Join.html\"><strong>Join</strong></a>: join elements of an array.</li>\n<li><a href=\"tools.LoadStream.html\"><strong>LoadStream</strong></a>: load file as a stream.</li>\n<li><a href=\"tools.LoadText.html\"><strong>LoadText</strong></a>: load file as a string.</li>\n<li><a href=\"tools.MatchRegexp.html\"><strong>MatchRegexp</strong></a>: match a string against a regular expression.</li>\n<li><a href=\"tools.Nop.html\"><strong>Nop</strong></a>: No operation.</li>\n<li><a href=\"tools.PrefixSuffix.html\"><strong>PrefixSuffix</strong></a>: surround a string with two constants.</li>\n<li><a href=\"tools.ReadDir.html\"><strong>ReadDir</strong></a>: list all files and subdirectories in a directory.</li>\n<li><a href=\"tools.SaveText.html\"><strong>SaveText</strong></a>: store string into a file.</li>\n<li><a href=\"tools.ShellExec.html\"><strong>ShellExec</strong></a>: execute a shell command.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":0}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n<h1>Built-in tools</h1>\n<ul>\n<li><a href=\"tools.BaseName.html\"><strong>BaseName</strong></a>: basename of a path.</li>\n<li><a href=\"tools.BlackHole.html\"><strong>BlackHole</strong></a>: swallow garbaged outputs.</li>\n<li><a href=\"tools.ChangeExtension.html\"><strong>ChangeExtension</strong></a>: change extension of a filename.</li>\n<li><a href=\"tools.ConcatStrings.html\"><strong>ConcatStrings</strong></a>: concat many strings.</li>\n<li><a href=\"tools.ConsoleLog.html\"><strong>ConsoleLog</strong></a>: log messages for debug.</li>\n<li><a href=\"tools.Constant.html\"><strong>Constant</strong></a>: outputs a constant.</li>\n<li><a href=\"tools.DirName.html\"><strong>DirName</strong></a>: dirname of a path.</li>\n<li><a href=\"tools.ExistsFile.html\"><strong>ExistsFile</strong></a>: test file existence.</li>\n<li><a href=\"tools.ForEach.html\"><strong>ForEach</strong></a>: loop on each element of an array.</li>\n<li><a href=\"tools.Join.html\"><strong>Join</strong></a>: join elements of an array.</li>\n<li><a href=\"tools.LoadStream.html\"><strong>LoadStream</strong></a>: load file as a stream.</li>\n<li><a href=\"tools.LoadText.html\"><strong>LoadText</strong></a>: load file as a string.</li>\n<li><a href=\"tools.MatchRegexp.html\"><strong>MatchRegexp</strong></a>: match a string against a regular expression.</li>\n<li><a href=\"tools.Nop.html\"><strong>Nop</strong></a>: No operation.</li>\n<li><a href=\"tools.PrefixSuffix.html\"><strong>PrefixSuffix</strong></a>: surround a string with two constants.</li>\n<li><a href=\"tools.ReadDir.html\"><strong>ReadDir</strong></a>: list all files and subdirectories in a directory.</li>\n<li><a href=\"tools.SaveText.html\"><strong>SaveText</strong></a>: store string into a file.</li>\n<li><a href=\"tools.ShellExec.html\"><strong>ShellExec</strong></a>: execute a shell command.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":0}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":0,"path":"e:\\Code\\github\\matis\\gh-pages/index.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n<h1>Built-in tools</h1>\n<ul>\n<li><a href=\"tools.BaseName.html\"><strong>BaseName</strong></a>: basename of a path.</li>\n<li><a href=\"tools.BlackHole.html\"><strong>BlackHole</strong></a>: swallow garbaged outputs.</li>\n<li><a href=\"tools.ChangeExtension.html\"><strong>ChangeExtension</strong></a>: change extension of a filename.</li>\n<li><a href=\"tools.ConcatStrings.html\"><strong>ConcatStrings</strong></a>: concat many strings.</li>\n<li><a href=\"tools.ConsoleLog.html\"><strong>ConsoleLog</strong></a>: log messages for debug.</li>\n<li><a href=\"tools.Constant.html\"><strong>Constant</strong></a>: outputs a constant.</li>\n<li><a href=\"tools.DirName.html\"><strong>DirName</strong></a>: dirname of a path.</li>\n<li><a href=\"tools.ExistsFile.html\"><strong>ExistsFile</strong></a>: test file existence.</li>\n<li><a href=\"tools.ForEach.html\"><strong>ForEach</strong></a>: loop on each element of an array.</li>\n<li><a href=\"tools.Join.html\"><strong>Join</strong></a>: join elements of an array.</li>\n<li><a href=\"tools.LoadStream.html\"><strong>LoadStream</strong></a>: load file as a stream.</li>\n<li><a href=\"tools.LoadText.html\"><strong>LoadText</strong></a>: load file as a string.</li>\n<li><a href=\"tools.MatchRegexp.html\"><strong>MatchRegexp</strong></a>: match a string against a regular expression.</li>\n<li><a href=\"tools.Nop.html\"><strong>Nop</strong></a>: No operation.</li>\n<li><a href=\"tools.PrefixSuffix.html\"><strong>PrefixSuffix</strong></a>: surround a string with two constants.</li>\n<li><a href=\"tools.ReadDir.html\"><strong>ReadDir</strong></a>: list all files and subdirectories in a directory.</li>\n<li><a href=\"tools.SaveText.html\"><strong>SaveText</strong></a>: store string into a file.</li>\n<li><a href=\"tools.ShellExec.html\"><strong>ShellExec</strong></a>: execute a shell command.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"_Fast complex asynchronous processes made easy_\r\n\r\n# Concepts\r\n\r\n* __[Input driven execution](input-driven-exec.html)__: processing starts as soon as input is ready.\r\n* __Parallelism__: tools are executed in parallel if it gives a time benefit. The result is a very fast process.\r\n* __Inputs order preserved__: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.\r\n* __Tracability__: you always know which input has been needed to produce any output.\r\n","$tag":1}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"_Fast complex asynchronous processes made easy_\r\n\r\n# Concepts\r\n\r\n* __[Input driven execution](input-driven-exec.html)__: processing starts as soon as input is ready.\r\n* __Parallelism__: tools are executed in parallel if it gives a time benefit. The result is a very fast process.\r\n* __Inputs order preserved__: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.\r\n* __Tracability__: you always know which input has been needed to produce any output.\r\n","output":1}
,{"action":"IN","tool":"Markdown","input":{"$tag":1,"md":"_Fast complex asynchronous processes made easy_\r\n\r\n# Concepts\r\n\r\n* __[Input driven execution](input-driven-exec.html)__: processing starts as soon as input is ready.\r\n* __Parallelism__: tools are executed in parallel if it gives a time benefit. The result is a very fast process.\r\n* __Inputs order preserved__: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.\r\n* __Tracability__: you always know which input has been needed to produce any output.\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n","$tag":1}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n","output":1}
,{"action":"IN","tool":"Combine","input":{"$tag":1,"body":"<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":1}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":1}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":1,"path":"e:\\Code\\github\\matis\\gh-pages/index.md~","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<p><em>Fast complex asynchronous processes made easy</em></p>\n<h1>Concepts</h1>\n<ul>\n<li><strong><a href=\"input-driven-exec.html\">Input driven execution</a></strong>: processing starts as soon as input is ready.</li>\n<li><strong>Parallelism</strong>: tools are executed in parallel if it gives a time benefit. The result is a very fast process.</li>\n<li><strong>Inputs order preserved</strong>: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.</li>\n<li><strong>Tracability</strong>: you always know which input has been needed to produce any output.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.BaseName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n","$tag":2}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.BaseName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n","output":2}
,{"action":"IN","tool":"Markdown","input":{"$tag":2,"md":"# tools.BaseName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* {string} __path__ - Path to which we want to extract the basename.\r\n\r\n## Outputs\r\n* {string} __basename__ - Basename of `path`.\r\n\r\n## Example\r\n```js\r\nvar Matis = require('matis');\r\n\r\nvar baseName = Matis.tools.BaseName();\r\nbaseName.exec(\r\n    { path: __filename },\r\n    function(outputs) {\r\n        console.log(\"Basename of \" + __filename + \" is \" + outputs.basename);\r\n    }\r\n)\r\n```\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.BaseName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>path</strong> - Path to which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>basename</strong> - Basename of <code>path</code>.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> Matis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'matis'</span>);\n\n<span class=\"hljs-keyword\">var</span> baseName = Matis.tools.BaseName();\nbaseName.exec(\n    { path: __filename },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Basename of \"</span> + __filename + <span class=\"hljs-string\">\" is \"</span> + outputs.basename);\n    }\n)\n</code></pre>\n","$tag":2}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.BaseName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>path</strong> - Path to which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>basename</strong> - Basename of <code>path</code>.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> Matis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'matis'</span>);\n\n<span class=\"hljs-keyword\">var</span> baseName = Matis.tools.BaseName();\nbaseName.exec(\n    { path: __filename },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Basename of \"</span> + __filename + <span class=\"hljs-string\">\" is \"</span> + outputs.basename);\n    }\n)\n</code></pre>\n","output":2}
,{"action":"IN","tool":"Combine","input":{"$tag":2,"body":"<h1>tools.BaseName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>path</strong> - Path to which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>basename</strong> - Basename of <code>path</code>.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> Matis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'matis'</span>);\n\n<span class=\"hljs-keyword\">var</span> baseName = Matis.tools.BaseName();\nbaseName.exec(\n    { path: __filename },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Basename of \"</span> + __filename + <span class=\"hljs-string\">\" is \"</span> + outputs.basename);\n    }\n)\n</code></pre>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.BaseName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>path</strong> - Path to which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>basename</strong> - Basename of <code>path</code>.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> Matis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'matis'</span>);\n\n<span class=\"hljs-keyword\">var</span> baseName = Matis.tools.BaseName();\nbaseName.exec(\n    { path: __filename },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Basename of \"</span> + __filename + <span class=\"hljs-string\">\" is \"</span> + outputs.basename);\n    }\n)\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":2}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.BaseName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>path</strong> - Path to which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>basename</strong> - Basename of <code>path</code>.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> Matis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'matis'</span>);\n\n<span class=\"hljs-keyword\">var</span> baseName = Matis.tools.BaseName();\nbaseName.exec(\n    { path: __filename },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Basename of \"</span> + __filename + <span class=\"hljs-string\">\" is \"</span> + outputs.basename);\n    }\n)\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":2}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":2,"path":"e:\\Code\\github\\matis\\gh-pages/tools.BaseName.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.BaseName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>path</strong> - Path to which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>basename</strong> - Basename of <code>path</code>.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> Matis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'matis'</span>);\n\n<span class=\"hljs-keyword\">var</span> baseName = Matis.tools.BaseName();\nbaseName.exec(\n    { path: __filename },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Basename of \"</span> + __filename + <span class=\"hljs-string\">\" is \"</span> + outputs.basename);\n    }\n)\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.BlackHole\n\n\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n","$tag":3}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.BlackHole\n\n\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n","output":3}
,{"action":"IN","tool":"Markdown","input":{"$tag":3,"md":"# tools.BlackHole\n\n\r\nAll not  linked ouptuts can  trigger a resolution.  But __BlackHole__ has no output. So, it is usefull for __ForEach__ tool.\r\n\r\n## Inputs\r\n* {any} __any__ - any kind of value which will be swallowed by the black hole.\r\n\r\n## Example\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.BlackHole</h1>\n<p>All not  linked ouptuts can  trigger a resolution.  But <strong>BlackHole</strong> has no output. So, it is usefull for <strong>ForEach</strong> tool.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{any} <strong>any</strong> - any kind of value which will be swallowed by the black hole.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n","$tag":3}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.BlackHole</h1>\n<p>All not  linked ouptuts can  trigger a resolution.  But <strong>BlackHole</strong> has no output. So, it is usefull for <strong>ForEach</strong> tool.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{any} <strong>any</strong> - any kind of value which will be swallowed by the black hole.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n","output":3}
,{"action":"IN","tool":"Combine","input":{"$tag":3,"body":"<h1>tools.BlackHole</h1>\n<p>All not  linked ouptuts can  trigger a resolution.  But <strong>BlackHole</strong> has no output. So, it is usefull for <strong>ForEach</strong> tool.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{any} <strong>any</strong> - any kind of value which will be swallowed by the black hole.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.BlackHole</h1>\n<p>All not  linked ouptuts can  trigger a resolution.  But <strong>BlackHole</strong> has no output. So, it is usefull for <strong>ForEach</strong> tool.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{any} <strong>any</strong> - any kind of value which will be swallowed by the black hole.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":3}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.BlackHole</h1>\n<p>All not  linked ouptuts can  trigger a resolution.  But <strong>BlackHole</strong> has no output. So, it is usefull for <strong>ForEach</strong> tool.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{any} <strong>any</strong> - any kind of value which will be swallowed by the black hole.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":3}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":3,"path":"e:\\Code\\github\\matis\\gh-pages/tools.BlackHole.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.BlackHole</h1>\n<p>All not  linked ouptuts can  trigger a resolution.  But <strong>BlackHole</strong> has no output. So, it is usefull for <strong>ForEach</strong> tool.</p>\n<h2>Inputs</h2>\n<ul>\n<li>{any} <strong>any</strong> - any kind of value which will be swallowed by the black hole.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.ChangeExtension\n\n\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n","$tag":4}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.ChangeExtension\n\n\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n","output":4}
,{"action":"IN","tool":"Markdown","input":{"$tag":4,"md":"# tools.ChangeExtension\n\n\r\nAn extension is the string after the last occurence of a dot (`.`) in a `path`.   This tool replaces  extensions with other one.\r\n\r\n## Options\r\nObject describing which changes have to be made.\r\nFor  instance `{less:  'css', md: 'html'}`  means that  the  tool must  replace extensions `.less` with `.css` and `.md` with `.html`.\r\n\r\n## Input\r\n* {string} __path__: The path of which we want to change the extension.\r\n\r\n## Output\r\n* {string} __path__: The  path with the  new extension. If the  extension is not part of the _options_, the output is the same as the input.\r\n\r\n## Example\r\n```js\r\nvar change = Matis.tools.ChangeExtension({less: 'css', md: 'html'});\r\n```\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.ChangeExtension</h1>\n<p>An extension is the string after the last occurence of a dot (<code>.</code>) in a <code>path</code>.   This tool replaces  extensions with other one.</p>\n<h2>Options</h2>\n<p>Object describing which changes have to be made.\nFor  instance <code>{less: 'css', md: 'html'}</code>  means that  the  tool must  replace extensions <code>.less</code> with <code>.css</code> and <code>.md</code> with <code>.html</code>.</p>\n<h2>Input</h2>\n<ul>\n<li>{string} <strong>path</strong>: The path of which we want to change the extension.</li>\n</ul>\n<h2>Output</h2>\n<ul>\n<li>{string} <strong>path</strong>: The  path with the  new extension. If the  extension is not part of the <em>options</em>, the output is the same as the input.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> change = Matis.tools.ChangeExtension({less: <span class=\"hljs-string\">'css'</span>, md: <span class=\"hljs-string\">'html'</span>});\n</code></pre>\n","$tag":4}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.ChangeExtension</h1>\n<p>An extension is the string after the last occurence of a dot (<code>.</code>) in a <code>path</code>.   This tool replaces  extensions with other one.</p>\n<h2>Options</h2>\n<p>Object describing which changes have to be made.\nFor  instance <code>{less: 'css', md: 'html'}</code>  means that  the  tool must  replace extensions <code>.less</code> with <code>.css</code> and <code>.md</code> with <code>.html</code>.</p>\n<h2>Input</h2>\n<ul>\n<li>{string} <strong>path</strong>: The path of which we want to change the extension.</li>\n</ul>\n<h2>Output</h2>\n<ul>\n<li>{string} <strong>path</strong>: The  path with the  new extension. If the  extension is not part of the <em>options</em>, the output is the same as the input.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> change = Matis.tools.ChangeExtension({less: <span class=\"hljs-string\">'css'</span>, md: <span class=\"hljs-string\">'html'</span>});\n</code></pre>\n","output":4}
,{"action":"IN","tool":"Combine","input":{"$tag":4,"body":"<h1>tools.ChangeExtension</h1>\n<p>An extension is the string after the last occurence of a dot (<code>.</code>) in a <code>path</code>.   This tool replaces  extensions with other one.</p>\n<h2>Options</h2>\n<p>Object describing which changes have to be made.\nFor  instance <code>{less: 'css', md: 'html'}</code>  means that  the  tool must  replace extensions <code>.less</code> with <code>.css</code> and <code>.md</code> with <code>.html</code>.</p>\n<h2>Input</h2>\n<ul>\n<li>{string} <strong>path</strong>: The path of which we want to change the extension.</li>\n</ul>\n<h2>Output</h2>\n<ul>\n<li>{string} <strong>path</strong>: The  path with the  new extension. If the  extension is not part of the <em>options</em>, the output is the same as the input.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> change = Matis.tools.ChangeExtension({less: <span class=\"hljs-string\">'css'</span>, md: <span class=\"hljs-string\">'html'</span>});\n</code></pre>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ChangeExtension</h1>\n<p>An extension is the string after the last occurence of a dot (<code>.</code>) in a <code>path</code>.   This tool replaces  extensions with other one.</p>\n<h2>Options</h2>\n<p>Object describing which changes have to be made.\nFor  instance <code>{less: 'css', md: 'html'}</code>  means that  the  tool must  replace extensions <code>.less</code> with <code>.css</code> and <code>.md</code> with <code>.html</code>.</p>\n<h2>Input</h2>\n<ul>\n<li>{string} <strong>path</strong>: The path of which we want to change the extension.</li>\n</ul>\n<h2>Output</h2>\n<ul>\n<li>{string} <strong>path</strong>: The  path with the  new extension. If the  extension is not part of the <em>options</em>, the output is the same as the input.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> change = Matis.tools.ChangeExtension({less: <span class=\"hljs-string\">'css'</span>, md: <span class=\"hljs-string\">'html'</span>});\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":4}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ChangeExtension</h1>\n<p>An extension is the string after the last occurence of a dot (<code>.</code>) in a <code>path</code>.   This tool replaces  extensions with other one.</p>\n<h2>Options</h2>\n<p>Object describing which changes have to be made.\nFor  instance <code>{less: 'css', md: 'html'}</code>  means that  the  tool must  replace extensions <code>.less</code> with <code>.css</code> and <code>.md</code> with <code>.html</code>.</p>\n<h2>Input</h2>\n<ul>\n<li>{string} <strong>path</strong>: The path of which we want to change the extension.</li>\n</ul>\n<h2>Output</h2>\n<ul>\n<li>{string} <strong>path</strong>: The  path with the  new extension. If the  extension is not part of the <em>options</em>, the output is the same as the input.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> change = Matis.tools.ChangeExtension({less: <span class=\"hljs-string\">'css'</span>, md: <span class=\"hljs-string\">'html'</span>});\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":4}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":4,"path":"e:\\Code\\github\\matis\\gh-pages/tools.ChangeExtension.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ChangeExtension</h1>\n<p>An extension is the string after the last occurence of a dot (<code>.</code>) in a <code>path</code>.   This tool replaces  extensions with other one.</p>\n<h2>Options</h2>\n<p>Object describing which changes have to be made.\nFor  instance <code>{less: 'css', md: 'html'}</code>  means that  the  tool must  replace extensions <code>.less</code> with <code>.css</code> and <code>.md</code> with <code>.html</code>.</p>\n<h2>Input</h2>\n<ul>\n<li>{string} <strong>path</strong>: The path of which we want to change the extension.</li>\n</ul>\n<h2>Output</h2>\n<ul>\n<li>{string} <strong>path</strong>: The  path with the  new extension. If the  extension is not part of the <em>options</em>, the output is the same as the input.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> change = Matis.tools.ChangeExtension({less: <span class=\"hljs-string\">'css'</span>, md: <span class=\"hljs-string\">'html'</span>});\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.ConcatStrings\n\n\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n","$tag":5}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.ConcatStrings\n\n\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n","output":5}
,{"action":"IN","tool":"Markdown","input":{"$tag":5,"md":"# tools.ConcatStrings\n\n\r\nConcat all the inputs in one output.\r\n\r\n## Inputs\r\nInputs depend on the options passed in the constructor.\r\n\r\n## Outputs\r\n* {string} __text__: the resulting concatenated text.\r\n\r\n## Options\r\nArray of inputs in the order you want them to be concatenated.\r\n\r\n## Example\r\n```js\r\nvar concat = Matis.tools.ConcatString(['prefix', 'radical', 'suffix']);\r\nconcat.exec(\r\n  {\r\n    prefix: \"<\",\r\n    radical: \"my-tag\",\r\n    suffix: \">\"\r\n  },\r\n  function(outputs) {\r\n    console.log(outputs.text);\r\n  }\r\n);\r\n```\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.ConcatStrings</h1>\n<p>Concat all the inputs in one output.</p>\n<h2>Inputs</h2>\n<p>Inputs depend on the options passed in the constructor.</p>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: the resulting concatenated text.</li>\n</ul>\n<h2>Options</h2>\n<p>Array of inputs in the order you want them to be concatenated.</p>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> concat = Matis.tools.ConcatString([<span class=\"hljs-string\">'prefix'</span>, <span class=\"hljs-string\">'radical'</span>, <span class=\"hljs-string\">'suffix'</span>]);\nconcat.exec(\n  {\n    prefix: <span class=\"hljs-string\">\"&lt;\"</span>,\n    radical: <span class=\"hljs-string\">\"my-tag\"</span>,\n    suffix: <span class=\"hljs-string\">\"&gt;\"</span>\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(outputs.text);\n  }\n);\n</code></pre>\n","$tag":5}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.ConcatStrings</h1>\n<p>Concat all the inputs in one output.</p>\n<h2>Inputs</h2>\n<p>Inputs depend on the options passed in the constructor.</p>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: the resulting concatenated text.</li>\n</ul>\n<h2>Options</h2>\n<p>Array of inputs in the order you want them to be concatenated.</p>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> concat = Matis.tools.ConcatString([<span class=\"hljs-string\">'prefix'</span>, <span class=\"hljs-string\">'radical'</span>, <span class=\"hljs-string\">'suffix'</span>]);\nconcat.exec(\n  {\n    prefix: <span class=\"hljs-string\">\"&lt;\"</span>,\n    radical: <span class=\"hljs-string\">\"my-tag\"</span>,\n    suffix: <span class=\"hljs-string\">\"&gt;\"</span>\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(outputs.text);\n  }\n);\n</code></pre>\n","output":5}
,{"action":"IN","tool":"Combine","input":{"$tag":5,"body":"<h1>tools.ConcatStrings</h1>\n<p>Concat all the inputs in one output.</p>\n<h2>Inputs</h2>\n<p>Inputs depend on the options passed in the constructor.</p>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: the resulting concatenated text.</li>\n</ul>\n<h2>Options</h2>\n<p>Array of inputs in the order you want them to be concatenated.</p>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> concat = Matis.tools.ConcatString([<span class=\"hljs-string\">'prefix'</span>, <span class=\"hljs-string\">'radical'</span>, <span class=\"hljs-string\">'suffix'</span>]);\nconcat.exec(\n  {\n    prefix: <span class=\"hljs-string\">\"&lt;\"</span>,\n    radical: <span class=\"hljs-string\">\"my-tag\"</span>,\n    suffix: <span class=\"hljs-string\">\"&gt;\"</span>\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(outputs.text);\n  }\n);\n</code></pre>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ConcatStrings</h1>\n<p>Concat all the inputs in one output.</p>\n<h2>Inputs</h2>\n<p>Inputs depend on the options passed in the constructor.</p>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: the resulting concatenated text.</li>\n</ul>\n<h2>Options</h2>\n<p>Array of inputs in the order you want them to be concatenated.</p>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> concat = Matis.tools.ConcatString([<span class=\"hljs-string\">'prefix'</span>, <span class=\"hljs-string\">'radical'</span>, <span class=\"hljs-string\">'suffix'</span>]);\nconcat.exec(\n  {\n    prefix: <span class=\"hljs-string\">\"&lt;\"</span>,\n    radical: <span class=\"hljs-string\">\"my-tag\"</span>,\n    suffix: <span class=\"hljs-string\">\"&gt;\"</span>\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(outputs.text);\n  }\n);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":5}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ConcatStrings</h1>\n<p>Concat all the inputs in one output.</p>\n<h2>Inputs</h2>\n<p>Inputs depend on the options passed in the constructor.</p>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: the resulting concatenated text.</li>\n</ul>\n<h2>Options</h2>\n<p>Array of inputs in the order you want them to be concatenated.</p>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> concat = Matis.tools.ConcatString([<span class=\"hljs-string\">'prefix'</span>, <span class=\"hljs-string\">'radical'</span>, <span class=\"hljs-string\">'suffix'</span>]);\nconcat.exec(\n  {\n    prefix: <span class=\"hljs-string\">\"&lt;\"</span>,\n    radical: <span class=\"hljs-string\">\"my-tag\"</span>,\n    suffix: <span class=\"hljs-string\">\"&gt;\"</span>\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(outputs.text);\n  }\n);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":5}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":5,"path":"e:\\Code\\github\\matis\\gh-pages/tools.ConcatStrings.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ConcatStrings</h1>\n<p>Concat all the inputs in one output.</p>\n<h2>Inputs</h2>\n<p>Inputs depend on the options passed in the constructor.</p>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: the resulting concatenated text.</li>\n</ul>\n<h2>Options</h2>\n<p>Array of inputs in the order you want them to be concatenated.</p>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> concat = Matis.tools.ConcatString([<span class=\"hljs-string\">'prefix'</span>, <span class=\"hljs-string\">'radical'</span>, <span class=\"hljs-string\">'suffix'</span>]);\nconcat.exec(\n  {\n    prefix: <span class=\"hljs-string\">\"&lt;\"</span>,\n    radical: <span class=\"hljs-string\">\"my-tag\"</span>,\n    suffix: <span class=\"hljs-string\">\"&gt;\"</span>\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(outputs.text);\n  }\n);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.ConsoleLog\n\n\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n","$tag":6}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.ConsoleLog\n\n\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n","output":6}
,{"action":"IN","tool":"Markdown","input":{"$tag":6,"md":"# tools.ConsoleLog\n\n\r\nThis tool is used for debug  purpose. By default, the input is displayed with the standard `logger.log()` function, then sent to the output unchanged.\r\nYou can provide your own logguer.\r\n\r\n## Options\r\n*  __prefix__ {_optional_ string}: a string that prepend each log. Default is `\"\"`.\r\n* __logger__ {_optional_ object}: an object that provides a `log(msg)`function. Default is the standard console.\r\nBy default, `logger` is equal to the standard javascript `console` object.\r\n\r\n## Inputs\r\n* __any__ {string}: the text to sent to the `logger`.\r\n\r\n## Outputs\r\n* __any__ {string}: the same text as the one entered.\r\n\r\n## Example\r\n```js\r\nvar logger = function(msg) { ... };\r\nvar tool1 = Matis.tools.ConsoleLog();\r\nvar tool2 = Matis.tools.ConsoleLog('> ');\r\nvar tool3 = Matis.tools.ConsoleLog(logger);\r\nvar tool4 = Matis.tools.ConsoleLog('> ', logger);\r\n```\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.ConsoleLog</h1>\n<p>This tool is used for debug  purpose. By default, the input is displayed with the standard <code>logger.log()</code> function, then sent to the output unchanged.\nYou can provide your own logguer.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {<em>optional</em> string}: a string that prepend each log. Default is <code>&quot;&quot;</code>.</li>\n<li><strong>logger</strong> {<em>optional</em> object}: an object that provides a <code>log(msg)</code>function. Default is the standard console.\nBy default, <code>logger</code> is equal to the standard javascript <code>console</code> object.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the text to sent to the <code>logger</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the same text as the one entered.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> logger = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>) </span>{ ... };\n<span class=\"hljs-keyword\">var</span> tool1 = Matis.tools.ConsoleLog();\n<span class=\"hljs-keyword\">var</span> tool2 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>);\n<span class=\"hljs-keyword\">var</span> tool3 = Matis.tools.ConsoleLog(logger);\n<span class=\"hljs-keyword\">var</span> tool4 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>, logger);\n</code></pre>\n","$tag":6}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.ConsoleLog</h1>\n<p>This tool is used for debug  purpose. By default, the input is displayed with the standard <code>logger.log()</code> function, then sent to the output unchanged.\nYou can provide your own logguer.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {<em>optional</em> string}: a string that prepend each log. Default is <code>&quot;&quot;</code>.</li>\n<li><strong>logger</strong> {<em>optional</em> object}: an object that provides a <code>log(msg)</code>function. Default is the standard console.\nBy default, <code>logger</code> is equal to the standard javascript <code>console</code> object.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the text to sent to the <code>logger</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the same text as the one entered.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> logger = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>) </span>{ ... };\n<span class=\"hljs-keyword\">var</span> tool1 = Matis.tools.ConsoleLog();\n<span class=\"hljs-keyword\">var</span> tool2 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>);\n<span class=\"hljs-keyword\">var</span> tool3 = Matis.tools.ConsoleLog(logger);\n<span class=\"hljs-keyword\">var</span> tool4 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>, logger);\n</code></pre>\n","output":6}
,{"action":"IN","tool":"Combine","input":{"$tag":6,"body":"<h1>tools.ConsoleLog</h1>\n<p>This tool is used for debug  purpose. By default, the input is displayed with the standard <code>logger.log()</code> function, then sent to the output unchanged.\nYou can provide your own logguer.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {<em>optional</em> string}: a string that prepend each log. Default is <code>&quot;&quot;</code>.</li>\n<li><strong>logger</strong> {<em>optional</em> object}: an object that provides a <code>log(msg)</code>function. Default is the standard console.\nBy default, <code>logger</code> is equal to the standard javascript <code>console</code> object.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the text to sent to the <code>logger</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the same text as the one entered.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> logger = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>) </span>{ ... };\n<span class=\"hljs-keyword\">var</span> tool1 = Matis.tools.ConsoleLog();\n<span class=\"hljs-keyword\">var</span> tool2 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>);\n<span class=\"hljs-keyword\">var</span> tool3 = Matis.tools.ConsoleLog(logger);\n<span class=\"hljs-keyword\">var</span> tool4 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>, logger);\n</code></pre>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ConsoleLog</h1>\n<p>This tool is used for debug  purpose. By default, the input is displayed with the standard <code>logger.log()</code> function, then sent to the output unchanged.\nYou can provide your own logguer.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {<em>optional</em> string}: a string that prepend each log. Default is <code>&quot;&quot;</code>.</li>\n<li><strong>logger</strong> {<em>optional</em> object}: an object that provides a <code>log(msg)</code>function. Default is the standard console.\nBy default, <code>logger</code> is equal to the standard javascript <code>console</code> object.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the text to sent to the <code>logger</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the same text as the one entered.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> logger = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>) </span>{ ... };\n<span class=\"hljs-keyword\">var</span> tool1 = Matis.tools.ConsoleLog();\n<span class=\"hljs-keyword\">var</span> tool2 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>);\n<span class=\"hljs-keyword\">var</span> tool3 = Matis.tools.ConsoleLog(logger);\n<span class=\"hljs-keyword\">var</span> tool4 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>, logger);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":6}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ConsoleLog</h1>\n<p>This tool is used for debug  purpose. By default, the input is displayed with the standard <code>logger.log()</code> function, then sent to the output unchanged.\nYou can provide your own logguer.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {<em>optional</em> string}: a string that prepend each log. Default is <code>&quot;&quot;</code>.</li>\n<li><strong>logger</strong> {<em>optional</em> object}: an object that provides a <code>log(msg)</code>function. Default is the standard console.\nBy default, <code>logger</code> is equal to the standard javascript <code>console</code> object.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the text to sent to the <code>logger</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the same text as the one entered.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> logger = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>) </span>{ ... };\n<span class=\"hljs-keyword\">var</span> tool1 = Matis.tools.ConsoleLog();\n<span class=\"hljs-keyword\">var</span> tool2 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>);\n<span class=\"hljs-keyword\">var</span> tool3 = Matis.tools.ConsoleLog(logger);\n<span class=\"hljs-keyword\">var</span> tool4 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>, logger);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":6}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":6,"path":"e:\\Code\\github\\matis\\gh-pages/tools.ConsoleLog.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ConsoleLog</h1>\n<p>This tool is used for debug  purpose. By default, the input is displayed with the standard <code>logger.log()</code> function, then sent to the output unchanged.\nYou can provide your own logguer.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {<em>optional</em> string}: a string that prepend each log. Default is <code>&quot;&quot;</code>.</li>\n<li><strong>logger</strong> {<em>optional</em> object}: an object that provides a <code>log(msg)</code>function. Default is the standard console.\nBy default, <code>logger</code> is equal to the standard javascript <code>console</code> object.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the text to sent to the <code>logger</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {string}: the same text as the one entered.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> logger = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>) </span>{ ... };\n<span class=\"hljs-keyword\">var</span> tool1 = Matis.tools.ConsoleLog();\n<span class=\"hljs-keyword\">var</span> tool2 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>);\n<span class=\"hljs-keyword\">var</span> tool3 = Matis.tools.ConsoleLog(logger);\n<span class=\"hljs-keyword\">var</span> tool4 = Matis.tools.ConsoleLog(<span class=\"hljs-string\">'&gt; '</span>, logger);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.Constant\n\n\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n","$tag":7}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.Constant\n\n\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n","output":7}
,{"action":"IN","tool":"Markdown","input":{"$tag":7,"md":"# tools.Constant\n\n\r\nSend a constant to its output `value`.\r\n\r\n## Options\r\nThe value to send as an output.\r\n\r\n## Inputs\r\n* __void__ {any}: can be any value. It is used only for trigerring.\r\n\r\n## Outputs\r\n* __value__ {any}: the constant value passed as option.\r\n\r\n## Example\r\n```js\r\nvar tool = Matis.tools.Constant(27);\r\ntool.exec(\r\n    {void: \"any kind on input\"},\r\n    function(outputs) {\r\n        if (outputs.value !== 27) {\r\n            throw \"IMPOSSIBLE!\";\r\n        }\r\n    }\r\n);\r\n```\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.Constant</h1>\n<p>Send a constant to its output <code>value</code>.</p>\n<h2>Options</h2>\n<p>The value to send as an output.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>void</strong> {any}: can be any value. It is used only for trigerring.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>value</strong> {any}: the constant value passed as option.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> tool = Matis.tools.Constant(<span class=\"hljs-number\">27</span>);\ntool.exec(\n    {<span class=\"hljs-keyword\">void</span>: <span class=\"hljs-string\">\"any kind on input\"</span>},\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (outputs.value !== <span class=\"hljs-number\">27</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"IMPOSSIBLE!\"</span>;\n        }\n    }\n);\n</code></pre>\n","$tag":7}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.Constant</h1>\n<p>Send a constant to its output <code>value</code>.</p>\n<h2>Options</h2>\n<p>The value to send as an output.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>void</strong> {any}: can be any value. It is used only for trigerring.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>value</strong> {any}: the constant value passed as option.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> tool = Matis.tools.Constant(<span class=\"hljs-number\">27</span>);\ntool.exec(\n    {<span class=\"hljs-keyword\">void</span>: <span class=\"hljs-string\">\"any kind on input\"</span>},\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (outputs.value !== <span class=\"hljs-number\">27</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"IMPOSSIBLE!\"</span>;\n        }\n    }\n);\n</code></pre>\n","output":7}
,{"action":"IN","tool":"Combine","input":{"$tag":7,"body":"<h1>tools.Constant</h1>\n<p>Send a constant to its output <code>value</code>.</p>\n<h2>Options</h2>\n<p>The value to send as an output.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>void</strong> {any}: can be any value. It is used only for trigerring.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>value</strong> {any}: the constant value passed as option.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> tool = Matis.tools.Constant(<span class=\"hljs-number\">27</span>);\ntool.exec(\n    {<span class=\"hljs-keyword\">void</span>: <span class=\"hljs-string\">\"any kind on input\"</span>},\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (outputs.value !== <span class=\"hljs-number\">27</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"IMPOSSIBLE!\"</span>;\n        }\n    }\n);\n</code></pre>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.Constant</h1>\n<p>Send a constant to its output <code>value</code>.</p>\n<h2>Options</h2>\n<p>The value to send as an output.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>void</strong> {any}: can be any value. It is used only for trigerring.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>value</strong> {any}: the constant value passed as option.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> tool = Matis.tools.Constant(<span class=\"hljs-number\">27</span>);\ntool.exec(\n    {<span class=\"hljs-keyword\">void</span>: <span class=\"hljs-string\">\"any kind on input\"</span>},\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (outputs.value !== <span class=\"hljs-number\">27</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"IMPOSSIBLE!\"</span>;\n        }\n    }\n);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":7}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.Constant</h1>\n<p>Send a constant to its output <code>value</code>.</p>\n<h2>Options</h2>\n<p>The value to send as an output.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>void</strong> {any}: can be any value. It is used only for trigerring.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>value</strong> {any}: the constant value passed as option.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> tool = Matis.tools.Constant(<span class=\"hljs-number\">27</span>);\ntool.exec(\n    {<span class=\"hljs-keyword\">void</span>: <span class=\"hljs-string\">\"any kind on input\"</span>},\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (outputs.value !== <span class=\"hljs-number\">27</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"IMPOSSIBLE!\"</span>;\n        }\n    }\n);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":7}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":7,"path":"e:\\Code\\github\\matis\\gh-pages/tools.Constant.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.Constant</h1>\n<p>Send a constant to its output <code>value</code>.</p>\n<h2>Options</h2>\n<p>The value to send as an output.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>void</strong> {any}: can be any value. It is used only for trigerring.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>value</strong> {any}: the constant value passed as option.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> tool = Matis.tools.Constant(<span class=\"hljs-number\">27</span>);\ntool.exec(\n    {<span class=\"hljs-keyword\">void</span>: <span class=\"hljs-string\">\"any kind on input\"</span>},\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (outputs.value !== <span class=\"hljs-number\">27</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"IMPOSSIBLE!\"</span>;\n        }\n    }\n);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.DirName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n","$tag":8}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.DirName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n","output":8}
,{"action":"IN","tool":"Markdown","input":{"$tag":8,"md":"# tools.DirName\n\n\r\nReturn the base name of `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from which we want to extract the basename.\r\n\r\n## Outputs\r\n* __basename__ {string}: basename of `path`.\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.DirName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>basename</strong> {string}: basename of <code>path</code>.</li>\n</ul>\n","$tag":8}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.DirName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>basename</strong> {string}: basename of <code>path</code>.</li>\n</ul>\n","output":8}
,{"action":"IN","tool":"Combine","input":{"$tag":8,"body":"<h1>tools.DirName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>basename</strong> {string}: basename of <code>path</code>.</li>\n</ul>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.DirName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>basename</strong> {string}: basename of <code>path</code>.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":8}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.DirName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>basename</strong> {string}: basename of <code>path</code>.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":8}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":8,"path":"e:\\Code\\github\\matis\\gh-pages/tools.DirName.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.DirName</h1>\n<p>Return the base name of <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from which we want to extract the basename.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>basename</strong> {string}: basename of <code>path</code>.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.ExistsFile\n\n\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n ","$tag":9}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.ExistsFile\n\n\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n ","output":9}
,{"action":"IN","tool":"Markdown","input":{"$tag":9,"md":"# tools.ExistsFile\n\n\r\nIf `path` exists and is a file, send  it on the `yes` output, otherwise, send it on the `no`.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file we want to know if it exists.\r\n\r\n## Outputs\r\n* __yes__ {string}: path of the file if it exists.\r\n* __no__{string}: path of the file if it does not exist.\r\n\r\n "}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.ExistsFile</h1>\n<p>If <code>path</code> exists and is a file, send  it on the <code>yes</code> output, otherwise, send it on the <code>no</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file we want to know if it exists.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: path of the file if it exists.</li>\n<li><strong>no</strong>{string}: path of the file if it does not exist.</li>\n</ul>\n","$tag":9}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.ExistsFile</h1>\n<p>If <code>path</code> exists and is a file, send  it on the <code>yes</code> output, otherwise, send it on the <code>no</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file we want to know if it exists.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: path of the file if it exists.</li>\n<li><strong>no</strong>{string}: path of the file if it does not exist.</li>\n</ul>\n","output":9}
,{"action":"IN","tool":"Combine","input":{"$tag":9,"body":"<h1>tools.ExistsFile</h1>\n<p>If <code>path</code> exists and is a file, send  it on the <code>yes</code> output, otherwise, send it on the <code>no</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file we want to know if it exists.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: path of the file if it exists.</li>\n<li><strong>no</strong>{string}: path of the file if it does not exist.</li>\n</ul>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ExistsFile</h1>\n<p>If <code>path</code> exists and is a file, send  it on the <code>yes</code> output, otherwise, send it on the <code>no</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file we want to know if it exists.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: path of the file if it exists.</li>\n<li><strong>no</strong>{string}: path of the file if it does not exist.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":9}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ExistsFile</h1>\n<p>If <code>path</code> exists and is a file, send  it on the <code>yes</code> output, otherwise, send it on the <code>no</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file we want to know if it exists.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: path of the file if it exists.</li>\n<li><strong>no</strong>{string}: path of the file if it does not exist.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":9}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":9,"path":"e:\\Code\\github\\matis\\gh-pages/tools.ExistsFile.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ExistsFile</h1>\n<p>If <code>path</code> exists and is a file, send  it on the <code>yes</code> output, otherwise, send it on the <code>no</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file we want to know if it exists.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: path of the file if it exists.</li>\n<li><strong>no</strong>{string}: path of the file if it does not exist.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.ForEach\n\n\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n","$tag":10}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.ForEach\n\n\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n","output":10}
,{"action":"IN","tool":"Markdown","input":{"$tag":10,"md":"# tools.ForEach\n\n\r\nThis is a powerful tool that loops on each element of an array an produces arrays.\r\n\r\n## Options\r\n* __tool__ {Matis.Tool}: the tool that will process each element one after the other.\r\n* __output__ {array[string]}: Array of outputs' names. They all will be arrays.\r\n\r\n## Inputs\r\nInputs are the same as inputs of `tool`, except that the first one must be an array.\r\n\r\n## Example\r\n### Several outputs\r\n```js\r\nvar isJS = Matis.tools.MatchRegexp('\\\\.js$');\r\nvar looper = Matis.tools.ForEach({ tool: isJS, output: [\"yes\", \"no\"]});\r\nlooper.exec(\r\n    { text: [\"a.js\", \"b.html\", \"c.js\", \"d.js\"] },\r\n    function(outputs) {\r\n        console.log(outputs);\r\n    }\r\n);\r\n```\r\n\r\n`outputs` will be equal to:\r\n```js\r\n{\r\n    yes: [\"a.js\", \"c.js\", \"d.js\"],\r\n    no: [\"b.html\"]\r\n}\r\n```\r\n\r\n### Using black-holes\r\n```js\r\nvar process = Matis.Process(function() {\r\n  this.Path = Matis.tools.Constant('mypath/subpath');\r\n  this.List = Matis.tools.ReadDir();\r\n  this.IsJavascript = Matis.tools.MatchRegexp('\\\\.js$');\r\n  this.IsTest = Matis.tools.MatchRegexp('spec');\r\n  this.Loop = Matis.tools.ForEach({\r\n    tool: this.IsJavascript,\r\n    output: \"no\"\r\n  });\r\n  this.Garbage = Matis.tools.BlackHole();\r\n}, [\r\n  \"Path > List > Loop\",\r\n  \"IsJavascript:yes > IsTest\",\r\n  \"IsJavascript:no  > Garbage\"\r\n]);\r\n```\r\n\r\nWithout the BlackHole, this process would filter no file because all the __no__ outputs are outputs of the `ForEach`.\r\n\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.ForEach</h1>\n<p>This is a powerful tool that loops on each element of an array an produces arrays.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>tool</strong> {Matis.Tool}: the tool that will process each element one after the other.</li>\n<li><strong>output</strong> {array[string]}: Array of outputs' names. They all will be arrays.</li>\n</ul>\n<h2>Inputs</h2>\n<p>Inputs are the same as inputs of <code>tool</code>, except that the first one must be an array.</p>\n<h2>Example</h2>\n<h3>Several outputs</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isJS = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n<span class=\"hljs-keyword\">var</span> looper = Matis.tools.ForEach({ tool: isJS, output: [<span class=\"hljs-string\">\"yes\"</span>, <span class=\"hljs-string\">\"no\"</span>]});\nlooper.exec(\n    { text: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"b.html\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>] },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(outputs);\n    }\n);\n</code></pre>\n<p><code>outputs</code> will be equal to:</p>\n<pre><code class=\"language-js\">{\n    yes: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>],\n    no: [<span class=\"hljs-string\">\"b.html\"</span>]\n}\n</code></pre>\n<h3>Using black-holes</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n","$tag":10}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.ForEach</h1>\n<p>This is a powerful tool that loops on each element of an array an produces arrays.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>tool</strong> {Matis.Tool}: the tool that will process each element one after the other.</li>\n<li><strong>output</strong> {array[string]}: Array of outputs' names. They all will be arrays.</li>\n</ul>\n<h2>Inputs</h2>\n<p>Inputs are the same as inputs of <code>tool</code>, except that the first one must be an array.</p>\n<h2>Example</h2>\n<h3>Several outputs</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isJS = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n<span class=\"hljs-keyword\">var</span> looper = Matis.tools.ForEach({ tool: isJS, output: [<span class=\"hljs-string\">\"yes\"</span>, <span class=\"hljs-string\">\"no\"</span>]});\nlooper.exec(\n    { text: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"b.html\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>] },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(outputs);\n    }\n);\n</code></pre>\n<p><code>outputs</code> will be equal to:</p>\n<pre><code class=\"language-js\">{\n    yes: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>],\n    no: [<span class=\"hljs-string\">\"b.html\"</span>]\n}\n</code></pre>\n<h3>Using black-holes</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n","output":10}
,{"action":"IN","tool":"Combine","input":{"$tag":10,"body":"<h1>tools.ForEach</h1>\n<p>This is a powerful tool that loops on each element of an array an produces arrays.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>tool</strong> {Matis.Tool}: the tool that will process each element one after the other.</li>\n<li><strong>output</strong> {array[string]}: Array of outputs' names. They all will be arrays.</li>\n</ul>\n<h2>Inputs</h2>\n<p>Inputs are the same as inputs of <code>tool</code>, except that the first one must be an array.</p>\n<h2>Example</h2>\n<h3>Several outputs</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isJS = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n<span class=\"hljs-keyword\">var</span> looper = Matis.tools.ForEach({ tool: isJS, output: [<span class=\"hljs-string\">\"yes\"</span>, <span class=\"hljs-string\">\"no\"</span>]});\nlooper.exec(\n    { text: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"b.html\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>] },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(outputs);\n    }\n);\n</code></pre>\n<p><code>outputs</code> will be equal to:</p>\n<pre><code class=\"language-js\">{\n    yes: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>],\n    no: [<span class=\"hljs-string\">\"b.html\"</span>]\n}\n</code></pre>\n<h3>Using black-holes</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ForEach</h1>\n<p>This is a powerful tool that loops on each element of an array an produces arrays.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>tool</strong> {Matis.Tool}: the tool that will process each element one after the other.</li>\n<li><strong>output</strong> {array[string]}: Array of outputs' names. They all will be arrays.</li>\n</ul>\n<h2>Inputs</h2>\n<p>Inputs are the same as inputs of <code>tool</code>, except that the first one must be an array.</p>\n<h2>Example</h2>\n<h3>Several outputs</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isJS = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n<span class=\"hljs-keyword\">var</span> looper = Matis.tools.ForEach({ tool: isJS, output: [<span class=\"hljs-string\">\"yes\"</span>, <span class=\"hljs-string\">\"no\"</span>]});\nlooper.exec(\n    { text: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"b.html\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>] },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(outputs);\n    }\n);\n</code></pre>\n<p><code>outputs</code> will be equal to:</p>\n<pre><code class=\"language-js\">{\n    yes: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>],\n    no: [<span class=\"hljs-string\">\"b.html\"</span>]\n}\n</code></pre>\n<h3>Using black-holes</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":10}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ForEach</h1>\n<p>This is a powerful tool that loops on each element of an array an produces arrays.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>tool</strong> {Matis.Tool}: the tool that will process each element one after the other.</li>\n<li><strong>output</strong> {array[string]}: Array of outputs' names. They all will be arrays.</li>\n</ul>\n<h2>Inputs</h2>\n<p>Inputs are the same as inputs of <code>tool</code>, except that the first one must be an array.</p>\n<h2>Example</h2>\n<h3>Several outputs</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isJS = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n<span class=\"hljs-keyword\">var</span> looper = Matis.tools.ForEach({ tool: isJS, output: [<span class=\"hljs-string\">\"yes\"</span>, <span class=\"hljs-string\">\"no\"</span>]});\nlooper.exec(\n    { text: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"b.html\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>] },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(outputs);\n    }\n);\n</code></pre>\n<p><code>outputs</code> will be equal to:</p>\n<pre><code class=\"language-js\">{\n    yes: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>],\n    no: [<span class=\"hljs-string\">\"b.html\"</span>]\n}\n</code></pre>\n<h3>Using black-holes</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":10}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":10,"path":"e:\\Code\\github\\matis\\gh-pages/tools.ForEach.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ForEach</h1>\n<p>This is a powerful tool that loops on each element of an array an produces arrays.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>tool</strong> {Matis.Tool}: the tool that will process each element one after the other.</li>\n<li><strong>output</strong> {array[string]}: Array of outputs' names. They all will be arrays.</li>\n</ul>\n<h2>Inputs</h2>\n<p>Inputs are the same as inputs of <code>tool</code>, except that the first one must be an array.</p>\n<h2>Example</h2>\n<h3>Several outputs</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isJS = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n<span class=\"hljs-keyword\">var</span> looper = Matis.tools.ForEach({ tool: isJS, output: [<span class=\"hljs-string\">\"yes\"</span>, <span class=\"hljs-string\">\"no\"</span>]});\nlooper.exec(\n    { text: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"b.html\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>] },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(outputs);\n    }\n);\n</code></pre>\n<p><code>outputs</code> will be equal to:</p>\n<pre><code class=\"language-js\">{\n    yes: [<span class=\"hljs-string\">\"a.js\"</span>, <span class=\"hljs-string\">\"c.js\"</span>, <span class=\"hljs-string\">\"d.js\"</span>],\n    no: [<span class=\"hljs-string\">\"b.html\"</span>]\n}\n</code></pre>\n<h3>Using black-holes</h3>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> process = Matis.Process(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.Path = Matis.tools.Constant(<span class=\"hljs-string\">'mypath/subpath'</span>);\n  <span class=\"hljs-keyword\">this</span>.List = Matis.tools.ReadDir();\n  <span class=\"hljs-keyword\">this</span>.IsJavascript = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'\\\\.js$'</span>);\n  <span class=\"hljs-keyword\">this</span>.IsTest = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'spec'</span>);\n  <span class=\"hljs-keyword\">this</span>.Loop = Matis.tools.ForEach({\n    tool: <span class=\"hljs-keyword\">this</span>.IsJavascript,\n    output: <span class=\"hljs-string\">\"no\"</span>\n  });\n  <span class=\"hljs-keyword\">this</span>.Garbage = Matis.tools.BlackHole();\n}, [\n  <span class=\"hljs-string\">\"Path &gt; List &gt; Loop\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:yes &gt; IsTest\"</span>,\n  <span class=\"hljs-string\">\"IsJavascript:no  &gt; Garbage\"</span>\n]);\n</code></pre>\n<p>Without the BlackHole, this process would filter no file because all the <strong>no</strong> outputs are outputs of the <code>ForEach</code>.</p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.Join\n\n\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n","$tag":11}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.Join\n\n\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n","output":11}
,{"action":"IN","tool":"Markdown","input":{"$tag":11,"md":"# tools.Join\n\n\r\nJoin all elements of an array with a `glue`.\r\n\r\n## Options\r\nYou can set a optional string to serve as a glue between array's elements.\r\n\r\n## Inputs\r\n* __array__ {array[string]}: array of strings whom elements you want to join.\r\n\r\n## Outputs\r\n* __text__ {string}: joined elements separated with `glue` or en empty string if `glue` is undefined.\r\n\r\n## Example\r\n```js\r\nit('should join with a glue.', function(done) {\r\n    var tool = Matis.tools.Join(\",\");\r\n    tool.exec(\r\n        {array: ['a', 'b', 'c']},\r\n        function(outputs) {\r\n            expect(outputs.text).toBe(\"a,b,c\");\r\n            done();\r\n        }\r\n    );\r\n});\r\n```\r\n\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.Join</h1>\n<p>Join all elements of an array with a <code>glue</code>.</p>\n<h2>Options</h2>\n<p>You can set a optional string to serve as a glue between array's elements.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>array</strong> {array[string]}: array of strings whom elements you want to join.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {string}: joined elements separated with <code>glue</code> or en empty string if <code>glue</code> is undefined.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\">it(<span class=\"hljs-string\">'should join with a glue.'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> tool = Matis.tools.Join(<span class=\"hljs-string\">\",\"</span>);\n    tool.exec(\n        {array: [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]},\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n            expect(outputs.text).toBe(<span class=\"hljs-string\">\"a,b,c\"</span>);\n            done();\n        }\n    );\n});\n</code></pre>\n","$tag":11}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.Join</h1>\n<p>Join all elements of an array with a <code>glue</code>.</p>\n<h2>Options</h2>\n<p>You can set a optional string to serve as a glue between array's elements.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>array</strong> {array[string]}: array of strings whom elements you want to join.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {string}: joined elements separated with <code>glue</code> or en empty string if <code>glue</code> is undefined.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\">it(<span class=\"hljs-string\">'should join with a glue.'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> tool = Matis.tools.Join(<span class=\"hljs-string\">\",\"</span>);\n    tool.exec(\n        {array: [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]},\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n            expect(outputs.text).toBe(<span class=\"hljs-string\">\"a,b,c\"</span>);\n            done();\n        }\n    );\n});\n</code></pre>\n","output":11}
,{"action":"IN","tool":"Combine","input":{"$tag":11,"body":"<h1>tools.Join</h1>\n<p>Join all elements of an array with a <code>glue</code>.</p>\n<h2>Options</h2>\n<p>You can set a optional string to serve as a glue between array's elements.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>array</strong> {array[string]}: array of strings whom elements you want to join.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {string}: joined elements separated with <code>glue</code> or en empty string if <code>glue</code> is undefined.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\">it(<span class=\"hljs-string\">'should join with a glue.'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> tool = Matis.tools.Join(<span class=\"hljs-string\">\",\"</span>);\n    tool.exec(\n        {array: [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]},\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n            expect(outputs.text).toBe(<span class=\"hljs-string\">\"a,b,c\"</span>);\n            done();\n        }\n    );\n});\n</code></pre>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.Join</h1>\n<p>Join all elements of an array with a <code>glue</code>.</p>\n<h2>Options</h2>\n<p>You can set a optional string to serve as a glue between array's elements.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>array</strong> {array[string]}: array of strings whom elements you want to join.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {string}: joined elements separated with <code>glue</code> or en empty string if <code>glue</code> is undefined.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\">it(<span class=\"hljs-string\">'should join with a glue.'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> tool = Matis.tools.Join(<span class=\"hljs-string\">\",\"</span>);\n    tool.exec(\n        {array: [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]},\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n            expect(outputs.text).toBe(<span class=\"hljs-string\">\"a,b,c\"</span>);\n            done();\n        }\n    );\n});\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":11}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.Join</h1>\n<p>Join all elements of an array with a <code>glue</code>.</p>\n<h2>Options</h2>\n<p>You can set a optional string to serve as a glue between array's elements.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>array</strong> {array[string]}: array of strings whom elements you want to join.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {string}: joined elements separated with <code>glue</code> or en empty string if <code>glue</code> is undefined.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\">it(<span class=\"hljs-string\">'should join with a glue.'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> tool = Matis.tools.Join(<span class=\"hljs-string\">\",\"</span>);\n    tool.exec(\n        {array: [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]},\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n            expect(outputs.text).toBe(<span class=\"hljs-string\">\"a,b,c\"</span>);\n            done();\n        }\n    );\n});\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":11}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":11,"path":"e:\\Code\\github\\matis\\gh-pages/tools.Join.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.Join</h1>\n<p>Join all elements of an array with a <code>glue</code>.</p>\n<h2>Options</h2>\n<p>You can set a optional string to serve as a glue between array's elements.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>array</strong> {array[string]}: array of strings whom elements you want to join.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {string}: joined elements separated with <code>glue</code> or en empty string if <code>glue</code> is undefined.</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\">it(<span class=\"hljs-string\">'should join with a glue.'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> tool = Matis.tools.Join(<span class=\"hljs-string\">\",\"</span>);\n    tool.exec(\n        {array: [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]},\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">outputs</span>) </span>{\n            expect(outputs.text).toBe(<span class=\"hljs-string\">\"a,b,c\"</span>);\n            done();\n        }\n    );\n});\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.L.shellExec\n\npetitjean@DEVPC016908.8780","$tag":12}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.L.shellExec\n\npetitjean@DEVPC016908.8780","output":12}
,{"action":"IN","tool":"Markdown","input":{"$tag":12,"md":"# tools.L.shellExec\n\npetitjean@DEVPC016908.8780"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.L.shellExec</h1>\n<p>petitjean@DEVPC016908.8780</p>\n","$tag":12}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.L.shellExec</h1>\n<p>petitjean@DEVPC016908.8780</p>\n","output":12}
,{"action":"IN","tool":"Combine","input":{"$tag":12,"body":"<h1>tools.L.shellExec</h1>\n<p>petitjean@DEVPC016908.8780</p>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.L.shellExec</h1>\n<p>petitjean@DEVPC016908.8780</p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":12}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.L.shellExec</h1>\n<p>petitjean@DEVPC016908.8780</p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":12}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":12,"path":"e:\\Code\\github\\matis\\gh-pages/tools.L.shellExec.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.L.shellExec</h1>\n<p>petitjean@DEVPC016908.8780</p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.LoadStream\n\n\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n","$tag":13}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.LoadStream\n\n\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n","output":13}
,{"action":"IN","tool":"Markdown","input":{"$tag":13,"md":"# tools.LoadStream\n\n\r\nLoad a stream from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __stream__ {Buffer}: resulting stream.\r\n\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.LoadStream</h1>\n<p>Load a stream from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>stream</strong> {Buffer}: resulting stream.</li>\n</ul>\n","$tag":13}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.LoadStream</h1>\n<p>Load a stream from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>stream</strong> {Buffer}: resulting stream.</li>\n</ul>\n","output":13}
,{"action":"IN","tool":"Combine","input":{"$tag":13,"body":"<h1>tools.LoadStream</h1>\n<p>Load a stream from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>stream</strong> {Buffer}: resulting stream.</li>\n</ul>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.LoadStream</h1>\n<p>Load a stream from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>stream</strong> {Buffer}: resulting stream.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":13}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.LoadStream</h1>\n<p>Load a stream from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>stream</strong> {Buffer}: resulting stream.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":13}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":13,"path":"e:\\Code\\github\\matis\\gh-pages/tools.LoadStream.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.LoadStream</h1>\n<p>Load a stream from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>stream</strong> {Buffer}: resulting stream.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.LoadText\n\n\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n","$tag":14}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.LoadText\n\n\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n","output":14}
,{"action":"IN","tool":"Markdown","input":{"$tag":14,"md":"# tools.LoadText\n\n\r\nLoad a text from a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to read.\r\n\r\n## Outputs\r\n* __text__ {text}: resulting text.\r\n\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.LoadText</h1>\n<p>Load a text from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {text}: resulting text.</li>\n</ul>\n","$tag":14}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.LoadText</h1>\n<p>Load a text from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {text}: resulting text.</li>\n</ul>\n","output":14}
,{"action":"IN","tool":"Combine","input":{"$tag":14,"body":"<h1>tools.LoadText</h1>\n<p>Load a text from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {text}: resulting text.</li>\n</ul>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.LoadText</h1>\n<p>Load a text from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {text}: resulting text.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":14}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.LoadText</h1>\n<p>Load a text from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {text}: resulting text.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":14}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":14,"path":"e:\\Code\\github\\matis\\gh-pages/tools.LoadText.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.LoadText</h1>\n<p>Load a text from a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to read.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>text</strong> {text}: resulting text.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.MatchRegexp\n\n\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n","$tag":15}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.MatchRegexp\n\n\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n","output":15}
,{"action":"IN","tool":"Markdown","input":{"$tag":15,"md":"# tools.MatchRegexp\n\n\r\nMatch `text` against a regexp `pattern`. The output can be `yes`or `no`.\r\n\r\n## Options\r\n* __pattern__ {string}: regular expression pattern.\r\n* __flags__ {optional string}: flags for this regexp.\r\n\r\n## Inputs\r\n* __text__ {string}: the string to test.\r\n\r\n## Outputs\r\n* __yes__ {string}: the input string if it matches.\r\n* __no__ {string}: the input string if it doen not match\r\n\r\n## Example\r\n```js\r\nvar isNumber = Matis.tools.MatchRegexp('[0-9]+');\r\n```\r\n\r\n\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.MatchRegexp</h1>\n<p>Match <code>text</code> against a regexp <code>pattern</code>. The output can be <code>yes</code>or <code>no</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>pattern</strong> {string}: regular expression pattern.</li>\n<li><strong>flags</strong> {optional string}: flags for this regexp.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>text</strong> {string}: the string to test.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: the input string if it matches.</li>\n<li><strong>no</strong> {string}: the input string if it doen not match</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isNumber = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'[0-9]+'</span>);\n</code></pre>\n","$tag":15}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.MatchRegexp</h1>\n<p>Match <code>text</code> against a regexp <code>pattern</code>. The output can be <code>yes</code>or <code>no</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>pattern</strong> {string}: regular expression pattern.</li>\n<li><strong>flags</strong> {optional string}: flags for this regexp.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>text</strong> {string}: the string to test.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: the input string if it matches.</li>\n<li><strong>no</strong> {string}: the input string if it doen not match</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isNumber = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'[0-9]+'</span>);\n</code></pre>\n","output":15}
,{"action":"IN","tool":"Combine","input":{"$tag":15,"body":"<h1>tools.MatchRegexp</h1>\n<p>Match <code>text</code> against a regexp <code>pattern</code>. The output can be <code>yes</code>or <code>no</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>pattern</strong> {string}: regular expression pattern.</li>\n<li><strong>flags</strong> {optional string}: flags for this regexp.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>text</strong> {string}: the string to test.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: the input string if it matches.</li>\n<li><strong>no</strong> {string}: the input string if it doen not match</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isNumber = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'[0-9]+'</span>);\n</code></pre>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.MatchRegexp</h1>\n<p>Match <code>text</code> against a regexp <code>pattern</code>. The output can be <code>yes</code>or <code>no</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>pattern</strong> {string}: regular expression pattern.</li>\n<li><strong>flags</strong> {optional string}: flags for this regexp.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>text</strong> {string}: the string to test.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: the input string if it matches.</li>\n<li><strong>no</strong> {string}: the input string if it doen not match</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isNumber = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'[0-9]+'</span>);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":15}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.MatchRegexp</h1>\n<p>Match <code>text</code> against a regexp <code>pattern</code>. The output can be <code>yes</code>or <code>no</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>pattern</strong> {string}: regular expression pattern.</li>\n<li><strong>flags</strong> {optional string}: flags for this regexp.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>text</strong> {string}: the string to test.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: the input string if it matches.</li>\n<li><strong>no</strong> {string}: the input string if it doen not match</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isNumber = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'[0-9]+'</span>);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":15}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":15,"path":"e:\\Code\\github\\matis\\gh-pages/tools.MatchRegexp.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.MatchRegexp</h1>\n<p>Match <code>text</code> against a regexp <code>pattern</code>. The output can be <code>yes</code>or <code>no</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>pattern</strong> {string}: regular expression pattern.</li>\n<li><strong>flags</strong> {optional string}: flags for this regexp.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>text</strong> {string}: the string to test.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>yes</strong> {string}: the input string if it matches.</li>\n<li><strong>no</strong> {string}: the input string if it doen not match</li>\n</ul>\n<h2>Example</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isNumber = Matis.tools.MatchRegexp(<span class=\"hljs-string\">'[0-9]+'</span>);\n</code></pre>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.Nop\n\n\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n","$tag":16}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.Nop\n\n\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n","output":16}
,{"action":"IN","tool":"Markdown","input":{"$tag":16,"md":"# tools.Nop\n\n\r\nOutpus the input verbatim.\r\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.\r\n\r\n## Inputs\r\n* __any__ {any}: any kind of input.\r\n\r\n## Outputs\r\n* __any__ {any}: the input, verbatim.\r\n\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.Nop</h1>\n<p>Outpus the input verbatim.\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {any}: any kind of input.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {any}: the input, verbatim.</li>\n</ul>\n","$tag":16}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.Nop</h1>\n<p>Outpus the input verbatim.\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {any}: any kind of input.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {any}: the input, verbatim.</li>\n</ul>\n","output":16}
,{"action":"IN","tool":"Combine","input":{"$tag":16,"body":"<h1>tools.Nop</h1>\n<p>Outpus the input verbatim.\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {any}: any kind of input.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {any}: the input, verbatim.</li>\n</ul>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.Nop</h1>\n<p>Outpus the input verbatim.\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {any}: any kind of input.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {any}: the input, verbatim.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":16}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.Nop</h1>\n<p>Outpus the input verbatim.\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {any}: any kind of input.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {any}: the input, verbatim.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":16}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":16,"path":"e:\\Code\\github\\matis\\gh-pages/tools.Nop.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.Nop</h1>\n<p>Outpus the input verbatim.\nCan be useful  as a synchronisation point, or to dispatch the same input to several outputs.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>any</strong> {any}: any kind of input.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>any</strong> {any}: the input, verbatim.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.PrefixSuffix\n\n\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n","$tag":17}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.PrefixSuffix\n\n\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n","output":17}
,{"action":"IN","tool":"Markdown","input":{"$tag":17,"md":"# tools.PrefixSuffix\n\n\r\nSurround `text`with a `prefix` and a `suffix`.\r\n\r\n## Options\r\n* __prefix__ {string}: the string to prepend to `text`.\r\n* __sufffix__ {string}: the string to append to `text`.\r\n\r\n## Inputs\r\n* {string} __text__: Text to surround with a `prefix` and `suffix`.\r\n\r\n## Outputs\r\n* {string} __text__: The surrounded text.\r\n\r\n## See also\r\n[Matis.tools.ConcatStrings](tools.ConcatStrings.html)\r\n\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.PrefixSuffix</h1>\n<p>Surround <code>text</code>with a <code>prefix</code> and a <code>suffix</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {string}: the string to prepend to <code>text</code>.</li>\n<li><strong>sufffix</strong> {string}: the string to append to <code>text</code>.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: Text to surround with a <code>prefix</code> and <code>suffix</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: The surrounded text.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ConcatStrings.html\">Matis.tools.ConcatStrings</a></p>\n","$tag":17}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.PrefixSuffix</h1>\n<p>Surround <code>text</code>with a <code>prefix</code> and a <code>suffix</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {string}: the string to prepend to <code>text</code>.</li>\n<li><strong>sufffix</strong> {string}: the string to append to <code>text</code>.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: Text to surround with a <code>prefix</code> and <code>suffix</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: The surrounded text.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ConcatStrings.html\">Matis.tools.ConcatStrings</a></p>\n","output":17}
,{"action":"IN","tool":"Combine","input":{"$tag":17,"body":"<h1>tools.PrefixSuffix</h1>\n<p>Surround <code>text</code>with a <code>prefix</code> and a <code>suffix</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {string}: the string to prepend to <code>text</code>.</li>\n<li><strong>sufffix</strong> {string}: the string to append to <code>text</code>.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: Text to surround with a <code>prefix</code> and <code>suffix</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: The surrounded text.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ConcatStrings.html\">Matis.tools.ConcatStrings</a></p>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.PrefixSuffix</h1>\n<p>Surround <code>text</code>with a <code>prefix</code> and a <code>suffix</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {string}: the string to prepend to <code>text</code>.</li>\n<li><strong>sufffix</strong> {string}: the string to append to <code>text</code>.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: Text to surround with a <code>prefix</code> and <code>suffix</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: The surrounded text.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ConcatStrings.html\">Matis.tools.ConcatStrings</a></p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":17}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.PrefixSuffix</h1>\n<p>Surround <code>text</code>with a <code>prefix</code> and a <code>suffix</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {string}: the string to prepend to <code>text</code>.</li>\n<li><strong>sufffix</strong> {string}: the string to append to <code>text</code>.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: Text to surround with a <code>prefix</code> and <code>suffix</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: The surrounded text.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ConcatStrings.html\">Matis.tools.ConcatStrings</a></p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":17}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":17,"path":"e:\\Code\\github\\matis\\gh-pages/tools.PrefixSuffix.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.PrefixSuffix</h1>\n<p>Surround <code>text</code>with a <code>prefix</code> and a <code>suffix</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>prefix</strong> {string}: the string to prepend to <code>text</code>.</li>\n<li><strong>sufffix</strong> {string}: the string to append to <code>text</code>.</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: Text to surround with a <code>prefix</code> and <code>suffix</code>.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li>{string} <strong>text</strong>: The surrounded text.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ConcatStrings.html\">Matis.tools.ConcatStrings</a></p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.ReadDir\n\n\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n ","$tag":18}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.ReadDir\n\n\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n ","output":18}
,{"action":"IN","tool":"Markdown","input":{"$tag":18,"md":"# tools.ReadDir\n\n\r\nReturn an array of files' names contained in the folder `path`.\r\n\r\n## Inputs\r\n* __path__ {string}: path from where to list existing files.\r\n\r\n## Outputs\r\n* __files__ {array[string]}: array of the  names of the files in the directory excluding `'.'` and `'..'`.\r\n\r\n## See also\r\n[Matis.tools.ForEach](tools.ForEach.html)\r\n\r\n "}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.ReadDir</h1>\n<p>Return an array of files' names contained in the folder <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from where to list existing files.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>files</strong> {array[string]}: array of the  names of the files in the directory excluding <code>'.'</code> and <code>'..'</code>.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ForEach.html\">Matis.tools.ForEach</a></p>\n","$tag":18}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.ReadDir</h1>\n<p>Return an array of files' names contained in the folder <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from where to list existing files.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>files</strong> {array[string]}: array of the  names of the files in the directory excluding <code>'.'</code> and <code>'..'</code>.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ForEach.html\">Matis.tools.ForEach</a></p>\n","output":18}
,{"action":"IN","tool":"Combine","input":{"$tag":18,"body":"<h1>tools.ReadDir</h1>\n<p>Return an array of files' names contained in the folder <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from where to list existing files.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>files</strong> {array[string]}: array of the  names of the files in the directory excluding <code>'.'</code> and <code>'..'</code>.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ForEach.html\">Matis.tools.ForEach</a></p>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ReadDir</h1>\n<p>Return an array of files' names contained in the folder <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from where to list existing files.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>files</strong> {array[string]}: array of the  names of the files in the directory excluding <code>'.'</code> and <code>'..'</code>.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ForEach.html\">Matis.tools.ForEach</a></p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":18}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ReadDir</h1>\n<p>Return an array of files' names contained in the folder <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from where to list existing files.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>files</strong> {array[string]}: array of the  names of the files in the directory excluding <code>'.'</code> and <code>'..'</code>.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ForEach.html\">Matis.tools.ForEach</a></p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":18}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":18,"path":"e:\\Code\\github\\matis\\gh-pages/tools.ReadDir.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ReadDir</h1>\n<p>Return an array of files' names contained in the folder <code>path</code>.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path from where to list existing files.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>files</strong> {array[string]}: array of the  names of the files in the directory excluding <code>'.'</code> and <code>'..'</code>.</li>\n</ul>\n<h2>See also</h2>\n<p><a href=\"tools.ForEach.html\">Matis.tools.ForEach</a></p>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.SaveText\n\n\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n ","$tag":19}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.SaveText\n\n\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n ","output":19}
,{"action":"IN","tool":"Markdown","input":{"$tag":19,"md":"# tools.SaveText\n\n\r\nSave text or stream to a file, given a `path`.\r\n\r\n## Options\r\nAs a string, this is the encoding. Otherwise, it has the same meaning as the argument in the [`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function of NodeJS.\r\n\r\nYou can specify the `path` attribute to it. In this case, the corresponding input is not definined.\r\n\r\n## Inputs\r\n* __path__ {string}: path of the file to write. This input is not defined if `options.path`is defined.\r\n* __text__ {string}: text to store in this file.\r\n\r\n## Outputs\r\n* __path__ {string}: text stored in this file.\r\n\r\n "}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.SaveText</h1>\n<p>Save text or stream to a file, given a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<p>You can specify the <code>path</code> attribute to it. In this case, the corresponding input is not definined.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to write. This input is not defined if <code>options.path</code>is defined.</li>\n<li><strong>text</strong> {string}: text to store in this file.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>path</strong> {string}: text stored in this file.</li>\n</ul>\n","$tag":19}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.SaveText</h1>\n<p>Save text or stream to a file, given a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<p>You can specify the <code>path</code> attribute to it. In this case, the corresponding input is not definined.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to write. This input is not defined if <code>options.path</code>is defined.</li>\n<li><strong>text</strong> {string}: text to store in this file.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>path</strong> {string}: text stored in this file.</li>\n</ul>\n","output":19}
,{"action":"IN","tool":"Combine","input":{"$tag":19,"body":"<h1>tools.SaveText</h1>\n<p>Save text or stream to a file, given a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<p>You can specify the <code>path</code> attribute to it. In this case, the corresponding input is not definined.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to write. This input is not defined if <code>options.path</code>is defined.</li>\n<li><strong>text</strong> {string}: text to store in this file.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>path</strong> {string}: text stored in this file.</li>\n</ul>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.SaveText</h1>\n<p>Save text or stream to a file, given a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<p>You can specify the <code>path</code> attribute to it. In this case, the corresponding input is not definined.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to write. This input is not defined if <code>options.path</code>is defined.</li>\n<li><strong>text</strong> {string}: text to store in this file.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>path</strong> {string}: text stored in this file.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":19}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.SaveText</h1>\n<p>Save text or stream to a file, given a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<p>You can specify the <code>path</code> attribute to it. In this case, the corresponding input is not definined.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to write. This input is not defined if <code>options.path</code>is defined.</li>\n<li><strong>text</strong> {string}: text to store in this file.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>path</strong> {string}: text stored in this file.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":19}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":19,"path":"e:\\Code\\github\\matis\\gh-pages/tools.SaveText.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.SaveText</h1>\n<p>Save text or stream to a file, given a <code>path</code>.</p>\n<h2>Options</h2>\n<p>As a string, this is the encoding. Otherwise, it has the same meaning as the argument in the <a href=\"https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback\"><code>fs.readFile(filename[, options], callback)</code></a> function of NodeJS.</p>\n<p>You can specify the <code>path</code> attribute to it. In this case, the corresponding input is not definined.</p>\n<h2>Inputs</h2>\n<ul>\n<li><strong>path</strong> {string}: path of the file to write. This input is not defined if <code>options.path</code>is defined.</li>\n<li><strong>text</strong> {string}: text to store in this file.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>path</strong> {string}: text stored in this file.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.ShellExec\n\n\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n","$tag":20}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.ShellExec\n\n\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n","output":20}
,{"action":"IN","tool":"Markdown","input":{"$tag":20,"md":"# tools.ShellExec\n\n\r\nExecute a shell command and outputs `stdout` and `stderr`.\r\n\r\n## Options\r\n* __cwd__ {string}: current working directory of the child process\r\n* __env__ {object}: environment key-value pairs\r\n* __encoding__ {string}: (default: 'utf8')\r\n* __shell__ {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)\r\n* __timeout__ {number}: (default: 0)\r\n* __maxBuffer__ {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)\r\n* __killSignal__ {string}: (default: 'SIGTERM')\r\n* __uid__ {number}: sets the user identity of the process. (See setuid(2).)\r\n* __gid__ {number}: sets the group identity of the process. (See setgid(2).)\r\n\r\n\r\n## Inputs\r\n* __command__ {string}: the command to run, with space-separated arguments.\r\n\r\n## Outputs\r\n* __command__ {string}: a copy of the corresponding input.\r\n\r\n## Examples\r\n\r\n\r\n"}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.ShellExec</h1>\n<p>Execute a shell command and outputs <code>stdout</code> and <code>stderr</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>cwd</strong> {string}: current working directory of the child process</li>\n<li><strong>env</strong> {object}: environment key-value pairs</li>\n<li><strong>encoding</strong> {string}: (default: 'utf8')</li>\n<li><strong>shell</strong> {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)</li>\n<li><strong>timeout</strong> {number}: (default: 0)</li>\n<li><strong>maxBuffer</strong> {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)</li>\n<li><strong>killSignal</strong> {string}: (default: 'SIGTERM')</li>\n<li><strong>uid</strong> {number}: sets the user identity of the process. (See setuid(2).)</li>\n<li><strong>gid</strong> {number}: sets the group identity of the process. (See setgid(2).)</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>command</strong> {string}: the command to run, with space-separated arguments.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>command</strong> {string}: a copy of the corresponding input.</li>\n</ul>\n<h2>Examples</h2>\n","$tag":20}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.ShellExec</h1>\n<p>Execute a shell command and outputs <code>stdout</code> and <code>stderr</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>cwd</strong> {string}: current working directory of the child process</li>\n<li><strong>env</strong> {object}: environment key-value pairs</li>\n<li><strong>encoding</strong> {string}: (default: 'utf8')</li>\n<li><strong>shell</strong> {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)</li>\n<li><strong>timeout</strong> {number}: (default: 0)</li>\n<li><strong>maxBuffer</strong> {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)</li>\n<li><strong>killSignal</strong> {string}: (default: 'SIGTERM')</li>\n<li><strong>uid</strong> {number}: sets the user identity of the process. (See setuid(2).)</li>\n<li><strong>gid</strong> {number}: sets the group identity of the process. (See setgid(2).)</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>command</strong> {string}: the command to run, with space-separated arguments.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>command</strong> {string}: a copy of the corresponding input.</li>\n</ul>\n<h2>Examples</h2>\n","output":20}
,{"action":"IN","tool":"Combine","input":{"$tag":20,"body":"<h1>tools.ShellExec</h1>\n<p>Execute a shell command and outputs <code>stdout</code> and <code>stderr</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>cwd</strong> {string}: current working directory of the child process</li>\n<li><strong>env</strong> {object}: environment key-value pairs</li>\n<li><strong>encoding</strong> {string}: (default: 'utf8')</li>\n<li><strong>shell</strong> {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)</li>\n<li><strong>timeout</strong> {number}: (default: 0)</li>\n<li><strong>maxBuffer</strong> {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)</li>\n<li><strong>killSignal</strong> {string}: (default: 'SIGTERM')</li>\n<li><strong>uid</strong> {number}: sets the user identity of the process. (See setuid(2).)</li>\n<li><strong>gid</strong> {number}: sets the group identity of the process. (See setgid(2).)</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>command</strong> {string}: the command to run, with space-separated arguments.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>command</strong> {string}: a copy of the corresponding input.</li>\n</ul>\n<h2>Examples</h2>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ShellExec</h1>\n<p>Execute a shell command and outputs <code>stdout</code> and <code>stderr</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>cwd</strong> {string}: current working directory of the child process</li>\n<li><strong>env</strong> {object}: environment key-value pairs</li>\n<li><strong>encoding</strong> {string}: (default: 'utf8')</li>\n<li><strong>shell</strong> {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)</li>\n<li><strong>timeout</strong> {number}: (default: 0)</li>\n<li><strong>maxBuffer</strong> {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)</li>\n<li><strong>killSignal</strong> {string}: (default: 'SIGTERM')</li>\n<li><strong>uid</strong> {number}: sets the user identity of the process. (See setuid(2).)</li>\n<li><strong>gid</strong> {number}: sets the group identity of the process. (See setgid(2).)</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>command</strong> {string}: the command to run, with space-separated arguments.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>command</strong> {string}: a copy of the corresponding input.</li>\n</ul>\n<h2>Examples</h2>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":20}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ShellExec</h1>\n<p>Execute a shell command and outputs <code>stdout</code> and <code>stderr</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>cwd</strong> {string}: current working directory of the child process</li>\n<li><strong>env</strong> {object}: environment key-value pairs</li>\n<li><strong>encoding</strong> {string}: (default: 'utf8')</li>\n<li><strong>shell</strong> {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)</li>\n<li><strong>timeout</strong> {number}: (default: 0)</li>\n<li><strong>maxBuffer</strong> {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)</li>\n<li><strong>killSignal</strong> {string}: (default: 'SIGTERM')</li>\n<li><strong>uid</strong> {number}: sets the user identity of the process. (See setuid(2).)</li>\n<li><strong>gid</strong> {number}: sets the group identity of the process. (See setgid(2).)</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>command</strong> {string}: the command to run, with space-separated arguments.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>command</strong> {string}: a copy of the corresponding input.</li>\n</ul>\n<h2>Examples</h2>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":20}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":20,"path":"e:\\Code\\github\\matis\\gh-pages/tools.ShellExec.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.ShellExec</h1>\n<p>Execute a shell command and outputs <code>stdout</code> and <code>stderr</code>.</p>\n<h2>Options</h2>\n<ul>\n<li><strong>cwd</strong> {string}: current working directory of the child process</li>\n<li><strong>env</strong> {object}: environment key-value pairs</li>\n<li><strong>encoding</strong> {string}: (default: 'utf8')</li>\n<li><strong>shell</strong> {string}: shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)</li>\n<li><strong>timeout</strong> {number}: (default: 0)</li>\n<li><strong>maxBuffer</strong> {number}: largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed (Default: 200*1024)</li>\n<li><strong>killSignal</strong> {string}: (default: 'SIGTERM')</li>\n<li><strong>uid</strong> {number}: sets the user identity of the process. (See setuid(2).)</li>\n<li><strong>gid</strong> {number}: sets the group identity of the process. (See setgid(2).)</li>\n</ul>\n<h2>Inputs</h2>\n<ul>\n<li><strong>command</strong> {string}: the command to run, with space-separated arguments.</li>\n</ul>\n<h2>Outputs</h2>\n<ul>\n<li><strong>command</strong> {string}: a copy of the corresponding input.</li>\n</ul>\n<h2>Examples</h2>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"LoadMdCode","output":{"text":"# tools.SvgToDataurl\n\n\r\n * Transform an SVG source into a DataURL ready to use in an image.\r\n ","$tag":21}}
,{"action":"POST","src":"LoadMdCode","srcAtt":"text","dst":"Markdown","dstAtt":"md","value":"# tools.SvgToDataurl\n\n\r\n * Transform an SVG source into a DataURL ready to use in an image.\r\n ","output":21}
,{"action":"IN","tool":"Markdown","input":{"$tag":21,"md":"# tools.SvgToDataurl\n\n\r\n * Transform an SVG source into a DataURL ready to use in an image.\r\n "}}
,{"action":"OUT","tool":"Markdown","output":{"html":"<h1>tools.SvgToDataurl</h1>\n<ul>\n<li>Transform an SVG source into a DataURL ready to use in an image.</li>\n</ul>\n","$tag":21}}
,{"action":"POST","src":"Markdown","srcAtt":"html","dst":"Combine","dstAtt":"body","value":"<h1>tools.SvgToDataurl</h1>\n<ul>\n<li>Transform an SVG source into a DataURL ready to use in an image.</li>\n</ul>\n","output":21}
,{"action":"IN","tool":"Combine","input":{"$tag":21,"body":"<h1>tools.SvgToDataurl</h1>\n<ul>\n<li>Transform an SVG source into a DataURL ready to use in an image.</li>\n</ul>\n"}}
,{"action":"OUT","tool":"Combine","output":{"text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.SvgToDataurl</h1>\n<ul>\n<li>Transform an SVG source into a DataURL ready to use in an image.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","$tag":21}}
,{"action":"POST","src":"Combine","srcAtt":"text","dst":"SaveHTML","dstAtt":"text","value":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.SvgToDataurl</h1>\n<ul>\n<li>Transform an SVG source into a DataURL ready to use in an image.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n","output":21}
,{"action":"IN","tool":"SaveHTML","input":{"$tag":21,"path":"e:\\Code\\github\\matis\\gh-pages/tools.SvgToDataurl.html","text":"<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset='utf-8'>\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\r\n        <meta name=\"viewport\" content=\"width=640\">\r\n\r\n        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n        <title>MATIS by tolokoban</title>\r\n    </head>\r\n\r\n    <body>\r\n        <header>\r\n            <h1><a href=\"index.html\">Matis</a> <span class='version'>0.1.0</span></h1>\r\n            <h2><span class='first-letter'>M</span>ulti-level <span class='first-letter'>A</span>synchrounous <span class='first-letter'>T</span>ools <span class='first-letter'>I</span>nterconnection <span class='first-letter'>S</span>ystem.</h2>\r\n        </header>\r\n        <section>\r\n            <div>\r\n<h1>tools.SvgToDataurl</h1>\n<ul>\n<li>Transform an SVG source into a DataURL ready to use in an image.</li>\n</ul>\n\r\n            </div>\r\n        </section>\r\n        <footer>\r\n            <a href=\"https://github.com/tolokoban/matis/zipball/master\"><small>download</small><br/>.ZIP</a>\r\n            <a href=\"https://github.com/tolokoban/matis/tarball/master\"><small>download</small><br/>.TGZ</a>\r\n            <a href=\"https://github.com/tolokoban/matis\">View on GitHub</a>\r\n        </footer>\r\n    </body>\r\n</html>\r\n"}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/index.html","$tag":0}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/index.md~","$tag":1}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.BaseName.html","$tag":2}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.BlackHole.html","$tag":3}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.ChangeExtension.html","$tag":4}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.ConcatStrings.html","$tag":5}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.ConsoleLog.html","$tag":6}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.Constant.html","$tag":7}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.DirName.html","$tag":8}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.ExistsFile.html","$tag":9}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.ForEach.html","$tag":10}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.Join.html","$tag":11}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.L.shellExec.html","$tag":12}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.LoadStream.html","$tag":13}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.LoadText.html","$tag":14}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.MatchRegexp.html","$tag":15}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.Nop.html","$tag":16}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.PrefixSuffix.html","$tag":17}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.ReadDir.html","$tag":18}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.SaveText.html","$tag":19}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.ShellExec.html","$tag":20}}
,{"action":"OUT","tool":"SaveHTML","output":{"path":"e:\\Code\\github\\matis\\gh-pages/tools.SvgToDataurl.html","$tag":21}}
,{"action":"OUT","tool":"ForEachMD","output":{"path":["e:\\Code\\github\\matis\\gh-pages/index.html","e:\\Code\\github\\matis\\gh-pages/index.md~","e:\\Code\\github\\matis\\gh-pages/tools.BaseName.html","e:\\Code\\github\\matis\\gh-pages/tools.BlackHole.html","e:\\Code\\github\\matis\\gh-pages/tools.ChangeExtension.html","e:\\Code\\github\\matis\\gh-pages/tools.ConcatStrings.html","e:\\Code\\github\\matis\\gh-pages/tools.ConsoleLog.html","e:\\Code\\github\\matis\\gh-pages/tools.Constant.html","e:\\Code\\github\\matis\\gh-pages/tools.DirName.html","e:\\Code\\github\\matis\\gh-pages/tools.ExistsFile.html","e:\\Code\\github\\matis\\gh-pages/tools.ForEach.html","e:\\Code\\github\\matis\\gh-pages/tools.Join.html","e:\\Code\\github\\matis\\gh-pages/tools.L.shellExec.html","e:\\Code\\github\\matis\\gh-pages/tools.LoadStream.html","e:\\Code\\github\\matis\\gh-pages/tools.LoadText.html","e:\\Code\\github\\matis\\gh-pages/tools.MatchRegexp.html","e:\\Code\\github\\matis\\gh-pages/tools.Nop.html","e:\\Code\\github\\matis\\gh-pages/tools.PrefixSuffix.html","e:\\Code\\github\\matis\\gh-pages/tools.ReadDir.html","e:\\Code\\github\\matis\\gh-pages/tools.SaveText.html","e:\\Code\\github\\matis\\gh-pages/tools.ShellExec.html","e:\\Code\\github\\matis\\gh-pages/tools.SvgToDataurl.html"]}}
