{"name":"Matis","tagline":"Asynchronous tools that can be linked together not just in a single pipe, but in a complete non-looping graph.","body":"# MATIS \r\n<small><em>Multi-level Asynchrounous Tools Interconnection System</em></small>\r\n\r\nFast complex asynchrounous processes made easy.\r\n\r\n## Concepts\r\n\r\n* __Input driven execution__: best explained with this ![animation](img/triggering.svg).\r\n* __Parallelism__: Tools are executed in parallel if it gives a time benefit. The result is a very fast process.\r\n* __Input order preserved__: even if a tool processes 3 inputs at the same time, outputs are post to the next tool in the same order.\r\n* __tracability__: Inputs trigger tools processing. And tools processing produces output. You always know which input has been needed to produce any output.\r\n\r\n\r\n## Example\r\n\r\n```text\r\n                           |\r\n                           | path\r\n                      +----------+\r\n                      | loadBody |\r\n                      +----------+\r\n                    path |    | text\r\n                         |    |\r\n                 +-------+--( | )----------+\r\n                 |            |            |\r\n            path |            |            | path\r\n        +------------------+  |  +------------------+\r\n        | changeExtForHead |  |  | changeExtForFoot |\r\n        +------------------+  |  +------------------+\r\n        path |                |              | path\r\n             |                |              |\r\n        path |                |              | path\r\n       +------------+         |         +------------+\r\n       | existsHead |         |         | existsFoot |\r\n       +------------+         |         +------------+\r\n       no |       | yes       |       yes |       | no\r\n          |       |           |           |       |\r\n     void |       | path      |      path |       | void\r\n+-----------+   +----------+  |  +----------+   +-----------+\r\n| constHead |   | loadHead |  |  | loadHead |   | constHead |\r\n+-----------+   +----------+  |  +----------+   +-----------+\r\n     text |       | text      |      text |       | text\r\n          |       |           |           |       |\r\n          +---+---+           |           +---+---+\r\n              |               |               |\r\n              +------------+  |  +------------+\r\n                           |  |  |\r\n                           | b|  | \r\n                           | o|  |\r\n                           | d|  |\r\n                      head | y|  | foot\r\n                         +--------+\r\n                         | concat |\r\n                         +--------+\r\n                             | text\r\n                             |\r\n```\r\n\r\n\r\n```js\r\nvar Matis = require(\"async-tools\");\r\n\r\n// Create tools.\r\nvar loadBody = Matis.tools.LoadText('utf-8');\r\nvar loadHead = Matis.tools.LoadText('utf-8');\r\nvar loadFoot = Matis.tools.LoadText('utf-8');\r\nvar changeExtForHead = Matis.tools.ChangeExtension({js: \"head\"});\r\nvar changeExtForFoot = Matis.tools.ChangeExtension({js: \"foot\"});\r\nvar existsHead = Matis.tools.ExistsFile();\r\nvar existsFoot = Matis.tools.ExistsFile();\r\nvar constHead = Matis.tools.Constant(\"// Missing header.\\n\");\r\nvar constFoot = Matis.tools.Constant(\"// Missing footer.\\n\");\r\nvar concat = Matis.tools.ConcatStrings(['head', 'body', 'foot']);\r\n\r\n// Link tools.\r\nloadBody.link('text', concat, 'body');\r\nloadBody.link('path', changeExtForHead).link(existsHead).link('yes', loadHead).link('text', concat, 'head');\r\nloadBody.link('path', changeExtForFoot).link(existsFoot).link('yes', loadFoot).link('text', concat, 'foot');\r\nexistsHead.link('no', constHead).link(concat, 'head');\r\nexistsFoot.link('no', constFoot).link(concat, 'foot');\r\n\r\n// Execute.\r\nloadBody.exec(\r\n    { path: 'myfile.js' },\r\n    function (output) {\r\n        console.log(\"Result is: \" + output.text);\r\n    },\r\n    function (err) {\r\n        console.error(\"Error: \" + err);\r\n    }\r\n);\r\n```\r\n\r\n## Build-in tools\r\n\r\nWhile it's easy to write your own tools, we provide a list of generic build-in tools which can help you quickly prototype your processes.\r\n\r\n\r\n\r\n<a name='Matis.tools.ChangeExtension'></a>\r\n### Matis.tools.ChangeExtension\r\n\r\n\r\nAn extension is the string after the last occurence of a dot (`.`) in\r\na `path`.   This tool replaces  extensions with other one.   It never\r\nfails: the `reject` function will never be called.\r\n\r\n@param {object}  extensions -  Each attribute  name is  replaced with\r\nit's  value. For  instance `{js:  'head'}` means  than the  extension\r\n`.js`  must  be  replaced  with `.head`.  Other  files  names  remain\r\nunchanged.\r\n\r\n\r\n<a name='Matis.tools.ConcatStrings'></a>\r\n### Matis.tools.ConcatStrings\r\n\r\n\r\nConcat all the inputs in one output. \r\n\r\n@param {array[string]} inputs - Array inputs' names.\r\n\r\n* __input__: Thisn tool has a variable number of inputs specified by the `inputs` argument.\r\n* __output__\r\n    * {string} `text` - The resulting concatenated string.\r\n\r\n\r\n<a name='Matis.tools.ConsoleLog'></a>\r\n### Matis.tools.ConsoleLog\r\n\r\n\r\nThis tool is used for debug  purpose. The input is displayed with the\r\n`console.log()` function, then sent to the output unchanged.\r\n\r\n\r\n<a name='Matis.tools.Constant'></a>\r\n### Matis.tools.Constant\r\n\r\n\r\nConstants cas be used in many cases, such as default values.\r\n\r\n* __argument__: the constant value this tool will always emit.\r\n* __input__\r\n    * {any} `void` - This input is just a trigger. It's value is ignored.\r\n* __output__\r\n    * {any} `value` - A constant value defined by the `value` argument.\r\n\r\n\r\n<a name='Matis.tools.ExistsFile'></a>\r\n### Matis.tools.ExistsFile\r\n\r\n\r\nIf  `path`  exists and  is  a  file, emit  it  on  the `yes`  output,\r\notherwise, emit it on the `no`.\r\n\r\n* __input__\r\n    * {string} path - Path of the file we want know if it exists.\r\n* __output__\r\n    * {string} yes - Path of the file if it exists.\r\n    * {string} no - Path of the file if it does not exist.\r\n\r\n\r\n<a name='Matis.tools.ForEach'></a>\r\n### Matis.tools.ForEach\r\n\r\n\r\n* __argument__:\r\n    * {array[string]} `input`: Array of inputs' names. The first one is the array over which we will loop.\r\n    * {array[string]} `output`: Array of outputs' names. They all are arrays.\r\n    * {Tool} `tool`:\r\n\r\n\r\n<a name='Matis.tools.Join'></a>\r\n### Matis.tools.Join\r\n\r\n\r\nJoin all elements of an array with a `glue`.\r\n\r\n* __param__ \r\n    * {string} glue - Text to add between two elements of the `array`.\r\n* __input__\r\n    * {array[string]} `array` - Array of strings to join with the `glue`.\r\n* __output__\r\n    * {string} `text` - The resulting joined array..\r\n\r\n\r\n<a name='Matis.tools.LoadStream'></a>\r\n### Matis.tools.LoadStream\r\n\r\n\r\n\r\n@param  {object|string}   options  -  As   a  string,  this   is  the\r\nencoding. Otherwise, it  has the same meaning as the  argument in the\r\n[`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function.\r\n\r\n\r\n<a name='Matis.tools.LoadText'></a>\r\n### Matis.tools.LoadText\r\n\r\n\r\n\r\n@param  {object|string}   options  -  As   a  string,  this   is  the\r\nencoding. Otherwise, it  has the same meaning as the  argument in the\r\n[`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function.\r\n\r\n\r\n<a name='Matis.tools.MatchRegexp'></a>\r\n### Matis.tools.MatchRegexp\r\n\r\n\r\nThis tool is used for debug  purpose. The input is displayed with the\r\n`console.log()` function, then sent to the output unchanged.\r\n\r\n\r\n<a name='Matis.tools.ReadDir'></a>\r\n### Matis.tools.ReadDir\r\n\r\n\r\n* Return an array of files' names contained in the folder `path`.\r\n* \r\n* * __input__\r\n*     * {string} `path` - Path from where to list existing files.\r\n* * __output__\r\n* * {array[string]} `files`  - Array of the  names of the files  in the\r\n        directory excluding `'.'` and `'..'`.\r\n\r\n\r\n<a name='Matis.tools.SaveText'></a>\r\n### Matis.tools.SaveText\r\n\r\n\r\n\r\n@param  {object|string}   options  -  As   a  string,  this   is  the\r\nencoding. Otherwise, it  has the same meaning as the  argument in the\r\n[`fs.readFile(filename[, options], callback)`](https://nodejs.org/dist/latest-v4.x/docs/api/fs.html#fs_fs_readfile_filename_options_callback) function. Default is `utf8`.\r\n\r\n\r\n<a name='Matis.tools.SvgToDataurl'></a>\r\n### Matis.tools.SvgToDataurl\r\n\r\n\r\nTransform an SVG source into a DataURL ready to use in an image.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}